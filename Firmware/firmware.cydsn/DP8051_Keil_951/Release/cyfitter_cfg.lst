C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDE
                    -BUG) WL(2) PR(.\DP8051_Keil_951\Release/cyfitter_cfg.lst) CD OT(11,SPEED) DF(CYAPP_ECC_OFFSET=1216) OJ(.\DP8051_Keil_951
                    -\Release\cyfitter_cfg.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          
   2          /*******************************************************************************
   3          * File Name: cyfitter_cfg.c
   4          * 
   5          * PSoC Creator  4.1 Update 1
   6          *
   7          * Description:
   8          * This file contains device initialization code.
   9          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
  10          * This file is automatically generated by PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright (c) 2007-2017 Cypress Semiconductor.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include <string.h>
  20          #include "cytypes.h"
  21          #include "cydevice_trm.h"
  22          #include "cyfitter.h"
  23          #include "CyLib.h"
  24          #include "cyfitter_cfg.h"
  25          
  26          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  27          
  28          
  29          #if defined(__C51__) || defined(__CX51__)
  30                  #define CYPACKED
  31                  #define CYPACKED_ATTR
  32                  #define CYALIGNED
  33                  #define DMAINITSEC
  34              #define CY_CFG_UNUSED
  35                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  36          
  37          
  38          
  39                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  40                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  41                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  42          #else
                      #error Unsupported toolchain
              #endif
  45          
  46          
  47          
  48          
  49          /* Clock startup error codes                                                   */
  50          #define CYCLOCKSTART_NO_ERROR    0u
  51          #define CYCLOCKSTART_XTAL_ERROR  1u
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 2   

  52          #define CYCLOCKSTART_32KHZ_ERROR 2u
  53          #define CYCLOCKSTART_PLL_ERROR   3u
  54          #define CYCLOCKSTART_FLL_ERROR   4u
  55          
  56          
  57          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  58          /*******************************************************************************
  59          * Function Name: CyClockStartupError
  60          ********************************************************************************
  61          * Summary:
  62          *  If an error is encountered during clock configuration (crystal startup error,
  63          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  64          *  the customer, this function will stop in an infinite loop.
  65          *
  66          * Parameters:
  67          *   void
  68          *
  69          * Return:
  70          *   void
  71          *
  72          *******************************************************************************/
  73          CY_CFG_UNUSED
  74          static void CyClockStartupError(uint8 errorCode);
  75          CY_CFG_UNUSED
  76          static void CyClockStartupError(uint8 errorCode)
  77          {
  78   1          /* To remove the compiler warning if errorCode not used. */
  79   1      #if defined(CY_PSOC3) && (CY_PSOC3)
  80   1          errorCode = errorCode;
  81   1      #else
                  (void)errorCode;
              #endif /* CY_PSOC3 */
  84   1      
  85   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  86   1          /* we will end up here to allow the customer to implement something to  */
  87   1          /* deal with the clock condition.                                       */
  88   1      
  89   1      #ifdef CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK
                  CY_CFG_Clock_Startup_ErrorCallback();
              #else
  92   1          /*  If not using CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK, place your clock startup code here. */
  93   1          /* `#START CyClockStartupError` */
  94   1      
  95   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  96   1          /* we will end up here to allow the customer to implement something to  */
  97   1          /* deal with the clock condition.                                       */
  98   1      
  99   1          /* `#END` */
 100   1      
 101   1          while(1) {}
 102   1      #endif /* CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK */
 103   1      }
 104          #endif
 105          
 106          /* IOPORT_0 Address: CYDEV_PRTDSI_PRT0_BASE Size (bytes): 7 */
 107          #define BS_IOPORT_0_VAL ((const uint8 CYFAR *)(0x00080000u + CYAPP_ECC_OFFSET))
 108          
 109          /* IOPORT_1 Address: CYDEV_PRTDSI_PRT1_BASE Size (bytes): 7 */
 110          #define BS_IOPORT_1_VAL ((const uint8 CYFAR *)(0x00080008u + CYAPP_ECC_OFFSET))
 111          
 112          /* IOPORT_2 Address: CYDEV_PRTDSI_PRT2_BASE Size (bytes): 7 */
 113          #define BS_IOPORT_2_VAL ((const uint8 CYFAR *)(0x00080010u + CYAPP_ECC_OFFSET))
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 3   

 114          
 115          /* IOPORT_7 Address: CYDEV_PRTDSI_PRT12_BASE Size (bytes): 6 */
 116          #define BS_IOPORT_7_VAL ((const uint8 CYFAR *)(0x00080018u + CYAPP_ECC_OFFSET))
 117          
 118          /* IOPORT_8 Address: CYDEV_PRTDSI_PRT15_BASE Size (bytes): 7 */
 119          #define BS_IOPORT_8_VAL ((const uint8 CYFAR *)(0x00080020u + CYAPP_ECC_OFFSET))
 120          
 121          /* IDMUX_IRQ Address: CYREG_IDMUX_IRQ_CTL0 Size (bytes): 8 */
 122          #define BS_IDMUX_IRQ_VAL ((const uint8 CYFAR *)(0x00080028u + CYAPP_ECC_OFFSET))
 123          
 124          /* TMR0 Address: CYREG_TMR0_CFG0 Size (bytes): 12 */
 125          #define BS_TMR0_VAL ((const uint8 CYFAR *)(0x00080030u + CYAPP_ECC_OFFSET))
 126          
 127          /* TMR1 Address: CYREG_TMR1_CFG0 Size (bytes): 12 */
 128          #define BS_TMR1_VAL ((const uint8 CYFAR *)(0x0008003Cu + CYAPP_ECC_OFFSET))
 129          
 130          /* UDB_1_5_1_CONFIG Address: CYDEV_UCFG_B0_P0_U1_BASE Size (bytes): 128 */
 131          #define BS_UDB_1_5_1_CONFIG_VAL ((const uint8 CYFAR *)(0x00080048u + CYAPP_ECC_OFFSET))
 132          
 133          /* UDB_1_3_0_CONFIG Address: CYDEV_UCFG_B0_P2_U0_BASE Size (bytes): 128 */
 134          #define BS_UDB_1_3_0_CONFIG_VAL ((const uint8 CYFAR *)(0x000800C8u + CYAPP_ECC_OFFSET))
 135          
 136          /* UDB_1_3_1_CONFIG Address: CYDEV_UCFG_B0_P2_U1_BASE Size (bytes): 128 */
 137          #define BS_UDB_1_3_1_CONFIG_VAL ((const uint8 CYFAR *)(0x00080148u + CYAPP_ECC_OFFSET))
 138          
 139          /* UDB_1_2_1_CONFIG Address: CYDEV_UCFG_B0_P3_U0_BASE Size (bytes): 128 */
 140          #define BS_UDB_1_2_1_CONFIG_VAL ((const uint8 CYFAR *)(0x000801C8u + CYAPP_ECC_OFFSET))
 141          
 142          /* UDB_1_2_0_CONFIG Address: CYDEV_UCFG_B0_P3_U1_BASE Size (bytes): 128 */
 143          #define BS_UDB_1_2_0_CONFIG_VAL ((const uint8 CYFAR *)(0x00080248u + CYAPP_ECC_OFFSET))
 144          
 145          /* UDB_0_3_0_CONFIG Address: CYDEV_UCFG_B0_P5_U0_BASE Size (bytes): 128 */
 146          #define BS_UDB_0_3_0_CONFIG_VAL ((const uint8 CYFAR *)(0x000802C8u + CYAPP_ECC_OFFSET))
 147          
 148          /* UDB_0_3_1_CONFIG Address: CYDEV_UCFG_B0_P5_U1_BASE Size (bytes): 128 */
 149          #define BS_UDB_0_3_1_CONFIG_VAL ((const uint8 CYFAR *)(0x00080348u + CYAPP_ECC_OFFSET))
 150          
 151          /* UDB_0_4_1_CONFIG Address: CYDEV_UCFG_B0_P6_U0_BASE Size (bytes): 128 */
 152          #define BS_UDB_0_4_1_CONFIG_VAL ((const uint8 CYFAR *)(0x000803C8u + CYAPP_ECC_OFFSET))
 153          
 154          /* UDB_0_4_0_CONFIG Address: CYDEV_UCFG_B0_P6_U1_BASE Size (bytes): 128 */
 155          #define BS_UDB_0_4_0_CONFIG_VAL ((const uint8 CYFAR *)(0x00080448u + CYAPP_ECC_OFFSET))
 156          
 157          /* UDB_0_5_0_CONFIG Address: CYDEV_UCFG_B0_P7_U0_BASE Size (bytes): 128 */
 158          #define BS_UDB_0_5_0_CONFIG_VAL ((const uint8 CYFAR *)(0x000804C8u + CYAPP_ECC_OFFSET))
 159          
 160          /* UDB_0_5_1_CONFIG Address: CYDEV_UCFG_B0_P7_U1_BASE Size (bytes): 128 */
 161          #define BS_UDB_0_5_1_CONFIG_VAL ((const uint8 CYFAR *)(0x00080548u + CYAPP_ECC_OFFSET))
 162          
 163          /* UDB_1_0_0_CONFIG Address: CYDEV_UCFG_B1_P2_U0_BASE Size (bytes): 128 */
 164          #define BS_UDB_1_0_0_CONFIG_VAL ((const uint8 CYFAR *)(0x000805C8u + CYAPP_ECC_OFFSET))
 165          
 166          /* UDB_1_0_1_CONFIG Address: CYDEV_UCFG_B1_P2_U1_BASE Size (bytes): 128 */
 167          #define BS_UDB_1_0_1_CONFIG_VAL ((const uint8 CYFAR *)(0x00080648u + CYAPP_ECC_OFFSET))
 168          
 169          /* UDB_1_1_1_CONFIG Address: CYDEV_UCFG_B1_P3_U0_BASE Size (bytes): 128 */
 170          #define BS_UDB_1_1_1_CONFIG_VAL ((const uint8 CYFAR *)(0x000806C8u + CYAPP_ECC_OFFSET))
 171          
 172          /* UDB_1_1_0_CONFIG Address: CYDEV_UCFG_B1_P3_U1_BASE Size (bytes): 128 */
 173          #define BS_UDB_1_1_0_CONFIG_VAL ((const uint8 CYFAR *)(0x00080748u + CYAPP_ECC_OFFSET))
 174          
 175          /* UWRK_B0_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070u Size (bytes): 32 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 4   

 176          #define BS_UWRK_B0_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)(0x000807C8u + CYAPP_ECC_OFFSET))
 177          
 178          /* UWRK_B1_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B1_BASE + 0x00000070u Size (bytes): 32 */
 179          #define BS_UWRK_B1_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)(0x000807E8u + CYAPP_ECC_OFFSET))
 180          
 181          /* UCFG_BCTL1 Address: CYREG_BCTL1_MDCLK_EN Size (bytes): 16 */
 182          #define BS_UCFG_BCTL1_VAL ((const uint8 CYFAR *)(0x00080808u + CYAPP_ECC_OFFSET))
 183          
 184          /* UCFG_BCTL0 Address: CYREG_BCTL0_MDCLK_EN Size (bytes): 16 */
 185          #define BS_UCFG_BCTL0_VAL ((const uint8 CYFAR *)(0x00080818u + CYAPP_ECC_OFFSET))
 186          
 187          /* DSI0_0_HV_ROUTING Address: CYDEV_UCFG_DSI13_BASE + 0x00000080u Size (bytes): 128 */
 188          #define BS_DSI0_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080828u + CYAPP_ECC_OFFSET))
 189          
 190          /* DSISWITCH_0_1 Address: CYDEV_UCFG_DSI12_BASE Size (bytes): 128 */
 191          #define BS_DSISWITCH_0_1_VAL ((const uint8 CYFAR *)(0x000808A8u + CYAPP_ECC_OFFSET))
 192          
 193          /* DSI0_1_HV_ROUTING Address: CYDEV_UCFG_DSI12_BASE + 0x00000080u Size (bytes): 128 */
 194          #define BS_DSI0_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080928u + CYAPP_ECC_OFFSET))
 195          
 196          /* DSI0_2_HV_ROUTING Address: CYDEV_UCFG_DSI7_BASE + 0x00000080u Size (bytes): 128 */
 197          #define BS_DSI0_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000809A8u + CYAPP_ECC_OFFSET))
 198          
 199          /* DSI0_3_HV_ROUTING Address: CYDEV_UCFG_DSI6_BASE + 0x00000080u Size (bytes): 128 */
 200          #define BS_DSI0_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080A28u + CYAPP_ECC_OFFSET))
 201          
 202          /* DSISWITCH_0_4 Address: CYDEV_UCFG_DSI5_BASE Size (bytes): 128 */
 203          #define BS_DSISWITCH_0_4_VAL ((const uint8 CYFAR *)(0x00080AA8u + CYAPP_ECC_OFFSET))
 204          
 205          /* DSI0_4_HV_ROUTING Address: CYDEV_UCFG_DSI5_BASE + 0x00000080u Size (bytes): 128 */
 206          #define BS_DSI0_4_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080B28u + CYAPP_ECC_OFFSET))
 207          
 208          /* UDB_1_0_HV_ROUTING Address: CYDEV_UCFG_B1_P5_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 209          #define BS_UDB_1_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080BA8u + CYAPP_ECC_OFFSET))
 210          
 211          /* UDBSWITCH_1_0 Address: CYDEV_UCFG_B1_P2_ROUTE_BASE Size (bytes): 128 */
 212          #define BS_UDBSWITCH_1_0_VAL ((const uint8 CYFAR *)(0x00080C28u + CYAPP_ECC_OFFSET))
 213          
 214          /* UDB_2_0_HV_ROUTING Address: CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 215          #define BS_UDB_2_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080CA8u + CYAPP_ECC_OFFSET))
 216          
 217          /* UDB_1_1_HV_ROUTING Address: CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 218          #define BS_UDB_1_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080D28u + CYAPP_ECC_OFFSET))
 219          
 220          /* UDBSWITCH_1_1 Address: CYDEV_UCFG_B1_P3_ROUTE_BASE Size (bytes): 128 */
 221          #define BS_UDBSWITCH_1_1_VAL ((const uint8 CYFAR *)(0x00080DA8u + CYAPP_ECC_OFFSET))
 222          
 223          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 224          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080E28u + CYAPP_ECC_OFFSET))
 225          
 226          /* UDB_1_2_HV_ROUTING Address: CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 227          #define BS_UDB_1_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080EA8u + CYAPP_ECC_OFFSET))
 228          
 229          /* UDBSWITCH_1_2 Address: CYDEV_UCFG_B0_P3_ROUTE_BASE Size (bytes): 128 */
 230          #define BS_UDBSWITCH_1_2_VAL ((const uint8 CYFAR *)(0x00080F28u + CYAPP_ECC_OFFSET))
 231          
 232          /* UDB_2_2_HV_ROUTING Address: CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 233          #define BS_UDB_2_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080FA8u + CYAPP_ECC_OFFSET))
 234          
 235          /* UDBSWITCH_0_3 Address: CYDEV_UCFG_B0_P5_ROUTE_BASE Size (bytes): 128 */
 236          #define BS_UDBSWITCH_0_3_VAL ((const uint8 CYFAR *)(0x00081028u + CYAPP_ECC_OFFSET))
 237          
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 5   

 238          /* UDB_1_3_HV_ROUTING Address: CYDEV_UCFG_B0_P5_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 239          #define BS_UDB_1_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000810A8u + CYAPP_ECC_OFFSET))
 240          
 241          /* UDBSWITCH_1_3 Address: CYDEV_UCFG_B0_P2_ROUTE_BASE Size (bytes): 128 */
 242          #define BS_UDBSWITCH_1_3_VAL ((const uint8 CYFAR *)(0x00081128u + CYAPP_ECC_OFFSET))
 243          
 244          /* UDB_2_3_HV_ROUTING Address: CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 245          #define BS_UDB_2_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000811A8u + CYAPP_ECC_OFFSET))
 246          
 247          /* UDBSWITCH_0_4 Address: CYDEV_UCFG_B0_P6_ROUTE_BASE Size (bytes): 128 */
 248          #define BS_UDBSWITCH_0_4_VAL ((const uint8 CYFAR *)(0x00081228u + CYAPP_ECC_OFFSET))
 249          
 250          /* UDB_1_4_HV_ROUTING Address: CYDEV_UCFG_B0_P6_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 251          #define BS_UDB_1_4_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000812A8u + CYAPP_ECC_OFFSET))
 252          
 253          /* UDB_2_4_HV_ROUTING Address: CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 254          #define BS_UDB_2_4_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00081328u + CYAPP_ECC_OFFSET))
 255          
 256          /* UDBSWITCH_0_5 Address: CYDEV_UCFG_B0_P7_ROUTE_BASE Size (bytes): 128 */
 257          #define BS_UDBSWITCH_0_5_VAL ((const uint8 CYFAR *)(0x000813A8u + CYAPP_ECC_OFFSET))
 258          
 259          /* UDB_1_5_HV_ROUTING Address: CYDEV_UCFG_B0_P7_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 260          #define BS_UDB_1_5_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00081428u + CYAPP_ECC_OFFSET))
 261          
 262          /* UDBSWITCH_1_5 Address: CYDEV_UCFG_B0_P0_ROUTE_BASE Size (bytes): 128 */
 263          #define BS_UDBSWITCH_1_5_VAL ((const uint8 CYFAR *)(0x000814A8u + CYAPP_ECC_OFFSET))
 264          
 265          /* UDB_2_5_HV_ROUTING Address: CYDEV_UCFG_B0_P0_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 266          #define BS_UDB_2_5_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00081528u + CYAPP_ECC_OFFSET))
 267          
 268          /* DSISWITCH_1_0 Address: CYDEV_UCFG_DSI9_BASE Size (bytes): 128 */
 269          #define BS_DSISWITCH_1_0_VAL ((const uint8 CYFAR *)(0x000815A8u + CYAPP_ECC_OFFSET))
 270          
 271          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080u Size (bytes): 128 */
 272          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00081628u + CYAPP_ECC_OFFSET))
 273          
 274          /* DSISWITCH_1_1 Address: CYDEV_UCFG_DSI8_BASE Size (bytes): 128 */
 275          #define BS_DSISWITCH_1_1_VAL ((const uint8 CYFAR *)(0x000816A8u + CYAPP_ECC_OFFSET))
 276          
 277          /* DSI3_1_HV_ROUTING Address: CYDEV_UCFG_DSI8_BASE + 0x00000080u Size (bytes): 128 */
 278          #define BS_DSI3_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00081728u + CYAPP_ECC_OFFSET))
 279          
 280          /* DSISWITCH_1_2 Address: CYDEV_UCFG_DSI3_BASE Size (bytes): 128 */
 281          #define BS_DSISWITCH_1_2_VAL ((const uint8 CYFAR *)(0x000817A8u + CYAPP_ECC_OFFSET))
 282          
 283          /* DSI3_2_HV_ROUTING Address: CYDEV_UCFG_DSI3_BASE + 0x00000080u Size (bytes): 128 */
 284          #define BS_DSI3_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00081828u + CYAPP_ECC_OFFSET))
 285          
 286          /* DSISWITCH_1_3 Address: CYDEV_UCFG_DSI2_BASE Size (bytes): 128 */
 287          #define BS_DSISWITCH_1_3_VAL ((const uint8 CYFAR *)(0x000818A8u + CYAPP_ECC_OFFSET))
 288          
 289          /* DSI3_3_HV_ROUTING Address: CYDEV_UCFG_DSI2_BASE + 0x00000080u Size (bytes): 128 */
 290          #define BS_DSI3_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00081928u + CYAPP_ECC_OFFSET))
 291          
 292          /* DSISWITCH_1_4 Address: CYDEV_UCFG_DSI1_BASE Size (bytes): 128 */
 293          #define BS_DSISWITCH_1_4_VAL ((const uint8 CYFAR *)(0x000819A8u + CYAPP_ECC_OFFSET))
 294          
 295          /* DSI3_4_HV_ROUTING Address: CYDEV_UCFG_DSI1_BASE + 0x00000080u Size (bytes): 128 */
 296          #define BS_DSI3_4_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00081A28u + CYAPP_ECC_OFFSET))
 297          
 298          /* DSISWITCH_1_5 Address: CYDEV_UCFG_DSI0_BASE Size (bytes): 128 */
 299          #define BS_DSISWITCH_1_5_VAL ((const uint8 CYFAR *)(0x00081AA8u + CYAPP_ECC_OFFSET))
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 6   

 300          
 301          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 302          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)(0x00081B28u + CYAPP_ECC_OFFSET))
 303          
 304          /* IOPINS0_7 Address: CYREG_PRT12_DM0 Size (bytes): 8 */
 305          #define BS_IOPINS0_7_VAL ((const uint8 CYFAR *)(0x00081B30u + CYAPP_ECC_OFFSET))
 306          
 307          
 308          /*******************************************************************************
 309          * Function Name: cfg_dma_init
 310          ********************************************************************************
 311          * Summary:
 312          *  This function is used to copy device configuration data from constant values
 313          *  stored in memory into the proper chip configuration registers using DMA.  It
 314          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 315          *
 316          * Parameters:  
 317          *   void
 318          *
 319          * Return:
 320          *   void
 321          *
 322          *******************************************************************************/
 323          static void cfg_dma_init(void);
 324          static void cfg_dma_init(void)
 325          {
 326   1              /* TD structure for big-endian systems. Requires 2-byte endian swap */
 327   1              CYPACKED struct td_t {
 328   1                      uint16 size;
 329   1                      uint8 flags;
 330   1                      uint8 next_td_ptr;
 331   1                      uint16 src;
 332   1                      uint16 dest;
 333   1              } CYPACKED_ATTR;
 334   1      
 335   1              /* DSI3_5_HV_ROUTING Address: CYDEV_UCFG_DSI0_BASE + 0x00000080u Size (bytes): 128 */
 336   1              DMAINITSEC static const uint8 CYCODE BS_DSI3_5_HV_ROUTING_VAL[] = {
 337   1                      0x00u, 0x20u, 0x40u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 338   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 339   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 340   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 341   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x70u, 0x00u, 0x00u,
             - 0x00u, 
 342   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 343   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x80u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 344   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u};
 345   1      
 346   1              /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 347   1              DMAINITSEC static const uint8 CYCODE CH1_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
             -, 0x00u };
 348   1      
 349   1              /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 350   1              DMAINITSEC static const uint8 CYCODE CH2_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x01u
             -, 0x00u };
 351   1      
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 7   

 352   1              /* PHUB_CH4_CFGMEM_CFG0/1 initialization data */
 353   1              DMAINITSEC static const uint8 CYCODE CH4_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x10u, 0x00u, 0x01u
             -, 0x00u };
 354   1      
 355   1              /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 356   1              DMAINITSEC static const uint8 CYCODE CH5_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x00u
             -, 0x00u };
 357   1      
 358   1              /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 359   1              DMAINITSEC static const uint8 CYCODE CH6_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x01u
             -, 0x00u };
 360   1      
 361   1              /* Initialization data for each DMA channel's TD registers */
 362   1              DMAINITSEC static const uint8 CYCODE DMA_TD_START_CMD[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x01u };
 363   1      
 364   1              CYALIGNED static uint32 CYXDATA DMA_ZERO_VAL;
 365   1      
 366   1              /* This table holds all of the initialization data necessary for the DMA
 367   1                 process to transfer data from the source location to the destination. */
 368   1              DMAINITSEC static const struct td_t CYCODE CFG_TD_LIST0[] = {
 369   1                      /* Size, Flags, Next, Source, Destination */
 370   1                      { 8u, 0x23u, 0x02u, (uint16)(uint32)(CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },      /* TD 1 */
 371   1                      { 8u, 0x23u, 0x03u, (uint16)(uint32)(CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },      /* TD 2 */
 372   1                      { 8u, 0x23u, 0x04u, (uint16)(uint32)(CH4_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM4_CFG0) },      /* TD 3 */
 373   1                      { 8u, 0x23u, 0x05u, (uint16)(uint32)(CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },      /* TD 4 */
 374   1                      { 8u, 0x23u, 0x06u, (uint16)(uint32)(CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },      /* TD 5 */
 375   1                      { 5u, 0x23u, 0x07u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },   /* TD 6 */
 376   1                      { 5u, 0x23u, 0x08u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },   /* TD 7 */
 377   1                      { 5u, 0x23u, 0x09u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH4_BASIC_CFG) },   /* TD 8 */
 378   1                      { 5u, 0x23u, 0x0Au, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },   /* TD 9 */
 379   1                      { 5u, 0x23u, 0xFEu, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },   /* TD 10 *
             -/
 380   1                      { 64u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT3_DR) },        /* TD 11 */
 381   1                      { 128u, 0x22u, 0x0Du, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },    /* TD 12 */
 382   1                      { 384u, 0x22u, 0x0Eu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P1_U0_BASE) },    /* TD 13 */
 383   1                      { 384u, 0x22u, 0x0Fu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P4_U0_BASE) },    /* TD 14 */
 384   1                      { 384u, 0x22u, 0x10u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },    /* TD 15 */
 385   1                      { 384u, 0x22u, 0x11u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P5_U0_BASE) },    /* TD 16 */
 386   1                      { 256u, 0x22u, 0x12u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE) },        /* TD 17 */
 387   1                      { 128u, 0x22u, 0x13u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE) },        /* TD 18 */
 388   1                      { 128u, 0x22u, 0x14u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE) },        /* TD 19 */
 389   1                      { 128u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE) },       /* TD 20 */
 390   1                      { 128u, 0x23u, 0xFEu, (uint16)(uint32)(BS_DSI3_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE + 0x0000
             -0080u) },        /* TD 21 */
 391   1                      { 7u, 0x23u, 0x17u, (uint16)(uint32)(BS_IOPORT_0_VAL), (uint16)(CYDEV_PRTDSI_PRT0_BASE) },      /* TD 22 */
 392   1                      { 7u, 0x23u, 0x18u, (uint16)(uint32)(BS_IOPORT_1_VAL), (uint16)(CYDEV_PRTDSI_PRT1_BASE) },      /* TD 23 */
 393   1                      { 7u, 0x23u, 0x19u, (uint16)(uint32)(BS_IOPORT_2_VAL), (uint16)(CYDEV_PRTDSI_PRT2_BASE) },      /* TD 24 */
 394   1                      { 6u, 0x23u, 0x1Au, (uint16)(uint32)(BS_IOPORT_7_VAL), (uint16)(CYDEV_PRTDSI_PRT12_BASE) },     /* TD 25 */
 395   1                      { 7u, 0x23u, 0x1Bu, (uint16)(uint32)(BS_IOPORT_8_VAL), (uint16)(CYDEV_PRTDSI_PRT15_BASE) },     /* TD 26 */
 396   1                      { 12u, 0x23u, 0x1Cu, (uint16)(uint32)(BS_TMR0_VAL), (uint16)(CYREG_TMR0_CFG0) },        /* TD 27 */
 397   1                      { 12u, 0x23u, 0x1Du, (uint16)(uint32)(BS_TMR1_VAL), (uint16)(CYREG_TMR1_CFG0) },        /* TD 28 */
 398   1                      { 32u, 0x23u, 0x1Eu, (uint16)(uint32)(BS_UWRK_B0_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B0_BAS
             -E + 0x00000070u) },   /* TD 29 */
 399   1                      { 32u, 0x23u, 0xFEu, (uint16)(uint32)(BS_UWRK_B1_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B1_BAS
             -E + 0x00000070u) },   /* TD 30 */
 400   1                      { 8u, 0x23u, 0x20u, (uint16)(uint32)(BS_IDMUX_IRQ_VAL), (uint16)(CYREG_IDMUX_IRQ_CTL0) },       /* TD 31 */
 401   1                      { 128u, 0x23u, 0x21u, (uint16)(uint32)(BS_UDB_1_5_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P0_U1_BASE) },  /
             -* TD 32 */
 402   1                      { 128u, 0x23u, 0x22u, (uint16)(uint32)(BS_UDB_1_3_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P2_U0_BASE) },  /
             -* TD 33 */
 403   1                      { 128u, 0x23u, 0x23u, (uint16)(uint32)(BS_UDB_1_3_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P2_U1_BASE) },  /
             -* TD 34 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 8   

 404   1                      { 128u, 0x23u, 0x24u, (uint16)(uint32)(BS_UDB_1_2_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P3_U0_BASE) },  /
             -* TD 35 */
 405   1                      { 128u, 0x23u, 0x25u, (uint16)(uint32)(BS_UDB_1_2_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P3_U1_BASE) },  /
             -* TD 36 */
 406   1                      { 128u, 0x23u, 0x26u, (uint16)(uint32)(BS_UDB_0_3_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P5_U0_BASE) },  /
             -* TD 37 */
 407   1                      { 128u, 0x23u, 0x27u, (uint16)(uint32)(BS_UDB_0_3_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P5_U1_BASE) },  /
             -* TD 38 */
 408   1                      { 128u, 0x23u, 0x28u, (uint16)(uint32)(BS_UDB_0_4_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P6_U0_BASE) },  /
             -* TD 39 */
 409   1                      { 128u, 0x23u, 0x29u, (uint16)(uint32)(BS_UDB_0_4_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P6_U1_BASE) },  /
             -* TD 40 */
 410   1                      { 128u, 0x23u, 0x2Au, (uint16)(uint32)(BS_UDB_0_5_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P7_U0_BASE) },  /
             -* TD 41 */
 411   1                      { 128u, 0x23u, 0x2Bu, (uint16)(uint32)(BS_UDB_0_5_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P7_U1_BASE) },  /
             -* TD 42 */
 412   1                      { 128u, 0x23u, 0x2Cu, (uint16)(uint32)(BS_UDB_1_0_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },  /
             -* TD 43 */
 413   1                      { 128u, 0x23u, 0x2Du, (uint16)(uint32)(BS_UDB_1_0_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P2_U1_BASE) },  /
             -* TD 44 */
 414   1                      { 128u, 0x23u, 0x2Eu, (uint16)(uint32)(BS_UDB_1_1_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P3_U0_BASE) },  /
             -* TD 45 */
 415   1                      { 128u, 0x23u, 0x2Fu, (uint16)(uint32)(BS_UDB_1_1_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P3_U1_BASE) },  /
             -* TD 46 */
 416   1                      { 16u, 0x23u, 0x30u, (uint16)(uint32)(BS_UCFG_BCTL1_VAL), (uint16)(CYREG_BCTL1_MDCLK_EN) },     /* TD 47 */
 417   1                      { 16u, 0x23u, 0x31u, (uint16)(uint32)(BS_UCFG_BCTL0_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) },     /* TD 48 */
 418   1                      { 128u, 0x23u, 0x32u, (uint16)(uint32)(BS_DSI0_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE + 0x000
             -00080u) },        /* TD 49 */
 419   1                      { 128u, 0x23u, 0x33u, (uint16)(uint32)(BS_DSISWITCH_0_1_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },        /* TD 5
             -0 */
 420   1                      { 128u, 0x23u, 0x34u, (uint16)(uint32)(BS_DSI0_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE + 0x000
             -00080u) },        /* TD 51 */
 421   1                      { 128u, 0x23u, 0x35u, (uint16)(uint32)(BS_DSI0_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE + 0x0000
             -0080u) },        /* TD 52 */
 422   1                      { 128u, 0x23u, 0x36u, (uint16)(uint32)(BS_DSI0_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE + 0x0000
             -0080u) },        /* TD 53 */
 423   1                      { 128u, 0x23u, 0x37u, (uint16)(uint32)(BS_DSISWITCH_0_4_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE) }, /* TD 54
             - */
 424   1                      { 128u, 0x23u, 0x38u, (uint16)(uint32)(BS_DSI0_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE + 0x0000
             -0080u) },        /* TD 55 */
 425   1                      { 128u, 0x23u, 0x39u, (uint16)(uint32)(BS_UDB_1_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P5_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 56 */
 426   1                      { 128u, 0x23u, 0x3Au, (uint16)(uint32)(BS_UDBSWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE) },  /
             -* TD 57 */
 427   1                      { 128u, 0x23u, 0x3Bu, (uint16)(uint32)(BS_UDB_2_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 58 */
 428   1                      { 128u, 0x23u, 0x3Cu, (uint16)(uint32)(BS_UDB_1_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P4_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 59 */
 429   1                      { 128u, 0x23u, 0x3Du, (uint16)(uint32)(BS_UDBSWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE) },  /
             -* TD 60 */
 430   1                      { 128u, 0x23u, 0x3Eu, (uint16)(uint32)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 61 */
 431   1                      { 128u, 0x23u, 0x3Fu, (uint16)(uint32)(BS_UDB_1_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P4_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 62 */
 432   1                      { 128u, 0x23u, 0x40u, (uint16)(uint32)(BS_UDBSWITCH_1_2_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE) },  /
             -* TD 63 */
 433   1                      { 128u, 0x23u, 0x41u, (uint16)(uint32)(BS_UDB_2_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 64 */
 434   1                      { 128u, 0x23u, 0x42u, (uint16)(uint32)(BS_UDBSWITCH_0_3_VAL), (uint16)(CYDEV_UCFG_B0_P5_ROUTE_BASE) },  /
             -* TD 65 */
 435   1                      { 128u, 0x23u, 0x43u, (uint16)(uint32)(BS_UDB_1_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P5_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 66 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 9   

 436   1                      { 128u, 0x23u, 0x44u, (uint16)(uint32)(BS_UDBSWITCH_1_3_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE) },  /
             -* TD 67 */
 437   1                      { 128u, 0x23u, 0x45u, (uint16)(uint32)(BS_UDB_2_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 68 */
 438   1                      { 128u, 0x23u, 0x46u, (uint16)(uint32)(BS_UDBSWITCH_0_4_VAL), (uint16)(CYDEV_UCFG_B0_P6_ROUTE_BASE) },  /
             -* TD 69 */
 439   1                      { 128u, 0x23u, 0x47u, (uint16)(uint32)(BS_UDB_1_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P6_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 70 */
 440   1                      { 128u, 0x23u, 0x48u, (uint16)(uint32)(BS_UDB_2_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P1_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 71 */
 441   1                      { 128u, 0x23u, 0x49u, (uint16)(uint32)(BS_UDBSWITCH_0_5_VAL), (uint16)(CYDEV_UCFG_B0_P7_ROUTE_BASE) },  /
             -* TD 72 */
 442   1                      { 128u, 0x23u, 0x4Au, (uint16)(uint32)(BS_UDB_1_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P7_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 73 */
 443   1                      { 128u, 0x23u, 0x4Bu, (uint16)(uint32)(BS_UDBSWITCH_1_5_VAL), (uint16)(CYDEV_UCFG_B0_P0_ROUTE_BASE) },  /
             -* TD 74 */
 444   1                      { 128u, 0x23u, 0x4Cu, (uint16)(uint32)(BS_UDB_2_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P0_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 75 */
 445   1                      { 128u, 0x23u, 0x4Du, (uint16)(uint32)(BS_DSISWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) }, /* TD 76
             - */
 446   1                      { 128u, 0x23u, 0x4Eu, (uint16)(uint32)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x0000
             -0080u) },        /* TD 77 */
 447   1                      { 128u, 0x23u, 0x4Fu, (uint16)(uint32)(BS_DSISWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE) }, /* TD 78
             - */
 448   1                      { 128u, 0x23u, 0x50u, (uint16)(uint32)(BS_DSI3_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE + 0x0000
             -0080u) },        /* TD 79 */
 449   1                      { 128u, 0x23u, 0x51u, (uint16)(uint32)(BS_DSISWITCH_1_2_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE) }, /* TD 80
             - */
 450   1                      { 128u, 0x23u, 0x52u, (uint16)(uint32)(BS_DSI3_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE + 0x0000
             -0080u) },        /* TD 81 */
 451   1                      { 128u, 0x23u, 0x53u, (uint16)(uint32)(BS_DSISWITCH_1_3_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE) }, /* TD 82
             - */
 452   1                      { 128u, 0x23u, 0x54u, (uint16)(uint32)(BS_DSI3_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE + 0x0000
             -0080u) },        /* TD 83 */
 453   1                      { 128u, 0x23u, 0x55u, (uint16)(uint32)(BS_DSISWITCH_1_4_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE) }, /* TD 84
             - */
 454   1                      { 128u, 0x23u, 0x56u, (uint16)(uint32)(BS_DSI3_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE + 0x0000
             -0080u) },        /* TD 85 */
 455   1                      { 128u, 0x23u, 0xFEu, (uint16)(uint32)(BS_DSISWITCH_1_5_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) }, /* TD 86
             - */
 456   1              };
 457   1      
 458   1              DMA_ZERO_VAL = 0u;
 459   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG0, 0x10u);    /* set burstcnt */
 460   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_CFG, 0x01u);   /* enable ch0 */
 461   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH0_BASIC_STATUS+1u), 0x00u);   /* set first TD to 0 */
 462   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD0, 86u*8u);       /* transfer size */
 463   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+2u), 0x01u);    /* set next TD to 1 */
 464   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+3u), 0xA3u);    /* set TD flags */
 465   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD1, (uint16)((uint32)CFG_TD_LIST0 & 0x0000FFFFu)); /
             -* set td0's src addr */
 466   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD1+2u), CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst a
             -ddr */
 467   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG1, (uint16)(CYDEV_FLS_BASE >> 16));  /* set ch0's src h
             -igh addr */
 468   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_CFGMEM0_CFG1+2u), (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));     /* se
             -t ch0's dst high addr */
 469   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH1_BASIC_STATUS+1u), 0x0Bu);   /* ch1 first TD: 11 */
 470   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH2_BASIC_STATUS+1u), 0x0Cu);   /* ch2 first TD: 12 */
 471   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH4_BASIC_STATUS+1u), 0x15u);   /* ch4 first TD: 21 */
 472   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH5_BASIC_STATUS+1u), 0x16u);   /* ch5 first TD: 22 */
 473   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH6_BASIC_STATUS+1u), 0x1Fu);   /* ch6 first TD: 31 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 10  

 474   1      
 475   1              CY_CFG_MEMORY_BARRIER();
 476   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_ACTION, 0x01u); /* cpu_req */
 477   1              CY_CFG_MEMORY_BARRIER();
 478   1      
 479   1              /* Wait for all DMA transfers to complete */
 480   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 481   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 482   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 483   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH4_BASIC_STATUS) & 0x01u)){}
 484   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 485   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 486   1      
 487   1      
 488   1      }
 489          /*******************************************************************************
 490          * Function Name: ClockSetup
 491          ********************************************************************************
 492          *
 493          * Summary:
 494          *  Performs the initialization of all of the clocks in the device based on the
 495          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 496          *  clocks and setting the necessary dividers to produce the desired frequency. 
 497          *
 498          * Parameters:
 499          *  void
 500          *
 501          * Return:
 502          *  void
 503          *
 504          *******************************************************************************/
 505          static void ClockSetup(void);
 506          static void ClockSetup(void)
 507          {
 508   1              uint32 timeout;
 509   1              uint8 pllLock;
 510   1      
 511   1      
 512   1              /* Configure Digital Clocks based on settings from Clock DWR */
 513   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0002u);
 514   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x18u);
 515   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x0FFFu);
 516   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG1_CFG0 + 0x2u), 0x1Bu);
 517   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG2_CFG0), 0x0017u);
 518   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG2_CFG0 + 0x2u), 0x18u);
 519   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG3_CFG0), 0x002Fu);
 520   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG3_CFG0 + 0x2u), 0x18u);
 521   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG4_CFG0), 0xBB7Fu);
 522   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG4_CFG0 + 0x2u), 0x18u);
 523   1      
 524   1              /* Configure ILO based on settings from Clock DWR */
 525   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x06u);
 526   1      
 527   1              /* Configure IMO based on settings from Clock DWR */
 528   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x52u);
 529   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_USB)));
 530   1      
 531   1              /* Configure PLL based on settings from Clock DWR */
 532   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0710u);
 533   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 534   1              /* Wait up to 250us for the PLL to lock */
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 11  

 535   1              pllLock = 0u;
 536   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 537   1              { 
 538   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 539   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 540   2              }
 541   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 542   1              if (timeout == 0u)
 543   1              {
 544   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 545   2              }
 546   1      
 547   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 548   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 549   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 550   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 551   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 552   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 553   1      
 554   1              /* Configure USB Clock based on settings from Clock DWR */
 555   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_UCFG), 0x00u);
 556   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 557   1      
 558   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x1Fu
             -)));
 559   1      }
 560          
 561          
 562          /* Analog API Functions */
 563          
 564          
 565          /*******************************************************************************
 566          * Function Name: AnalogSetDefault
 567          ********************************************************************************
 568          *
 569          * Summary:
 570          *  Sets up the analog portions of the chip to default values based on chip
 571          *  configuration options from the project.
 572          *
 573          * Parameters:
 574          *  void
 575          *
 576          * Return:
 577          *  void
 578          *
 579          *******************************************************************************/
 580          static void AnalogSetDefault(void);
 581          static void AnalogSetDefault(void)
 582          {
 583   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 584   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 585   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 586   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 587   1      }
 588          
 589          
 590          /*******************************************************************************
 591          * Function Name: SetAnalogRoutingPumps
 592          ********************************************************************************
 593          *
 594          * Summary:
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 12  

 595          * Enables or disables the analog pumps feeding analog routing switches.
 596          * Intended to be called at startup, based on the Vdda system configuration;
 597          * may be called during operation when the user informs us that the Vdda voltage
 598          * crossed the pump threshold.
 599          *
 600          * Parameters:
 601          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 602          *
 603          * Return:
 604          *  void
 605          *
 606          *******************************************************************************/
 607          void SetAnalogRoutingPumps(uint8 enabled)
 608          {
 609   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 610   1              if (enabled != 0u)
 611   1              {
 612   2                      regValue |= 0x00u;
 613   2              }
 614   1              else
 615   1              {
 616   2                      regValue &= (uint8)~0x00u;
 617   2              }
 618   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 619   1      }
 620          
 621          
 622          
 623          
 624          /*******************************************************************************
 625          * Function Name: cyfitter_cfg
 626          ********************************************************************************
 627          * Summary:
 628          *  This function is called by the start-up code for the selected device. It
 629          *  performs all of the necessary device configuration based on the design
 630          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 631          *  as Clocks and Pins as well as any component configuration that is necessary.
 632          *
 633          * Parameters:
 634          *   void
 635          *
 636          * Return:
 637          *   void
 638          *
 639          *******************************************************************************/
 640          
 641          void cyfitter_cfg(void)
 642          {
 643   1              /* IOPINS0_8 Address: CYREG_PRT15_DM0 Size (bytes): 8 */
 644   1              DMAINITSEC static const uint8 CYCODE BS_IOPINS0_8_VAL[] = {
 645   1                      0x00u, 0x07u, 0x07u, 0x00u, 0x07u, 0x00u, 0x00u, 0x00u};
 646   1      
 647   1              /* IOPINS0_1 Address: CYREG_PRT1_DR Size (bytes): 10 */
 648   1              DMAINITSEC static const uint8 CYCODE BS_IOPINS0_1_VAL[] = {
 649   1                      0x00u, 0x00u, 0x00u, 0xFEu, 0xFAu, 0x00u, 0xF2u, 0x00u, 0x00u, 0x00u};
 650   1      
 651   1              /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 652   1              DMAINITSEC static const uint8 CYCODE BS_IOPINS0_2_VAL[] = {
 653   1                      0x30u, 0xD8u, 0xC8u, 0x00u, 0xD8u, 0x00u, 0x00u, 0x00u};
 654   1      
 655   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 656   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 13  

             -0x01u));
 657   1      
 658   1              {
 659   2                      cfg_dma_init();
 660   2      
 661   2                      /* Enable digital routing */
 662   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 663   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 664   2      
 665   2                      /* Enable UDB array */
 666   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 667   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 668   2              }
 669   1      
 670   1      
 671   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 672   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (const void CYFAR *)(BS_IOPINS0_0_VAL), 8u);
 673   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT12_DM0), (const void CYFAR *)(BS_IOPINS0_7_VAL), 8u);
 674   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT15_DM0), (const void CYCODE *)(BS_IOPINS0_8_VAL), 8u);
 675   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT1_DR), (const void CYCODE *)(BS_IOPINS0_1_VAL), 10u);
 676   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT2_DM0), (const void CYCODE *)(BS_IOPINS0_2_VAL), 8u);
 677   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 678   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 679   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 680   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 681   1              {
 682   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 683   2              }
 684   1      
 685   1      
 686   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 687   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 688   1              /* Setup clocks based on selections from Clock DWR */
 689   1              ClockSetup();
 690   1      
 691   1              /* Perform basic analog initialization to defaults */
 692   1              AnalogSetDefault();
 693   1      
 694   1              /* Configure alternate active mode */
 695   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 696   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 697   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 80
0000         ?C0001:
                                           ; SOURCE LINE # 101
0000 80FE              SJMP    ?C0001
0002 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 458
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 FE                MOV     R6,A
0003 FD                MOV     R5,A
0004 FC                MOV     R4,A
0005 900000      R     MOV     DPTR,#DMA_ZERO_VAL
0008 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 459
000B 907600            MOV     DPTR,#07600H
000E 7410              MOV     A,#010H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0011 907010            MOV     DPTR,#07010H
0014 7401              MOV     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
0017 907019            MOV     DPTR,#07019H
001A E4                CLR     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
001C 7B02              MOV     R3,#02H
001E 7A78              MOV     R2,#078H
0020 F9                MOV     R1,A
0021 7DB0              MOV     R5,#0B0H
0023 7C02              MOV     R4,#02H
0025 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 463
0028 907802            MOV     DPTR,#07802H
002B 7401              MOV     A,#01H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
002E A3                INC     DPTR
002F 74A3              MOV     A,#0A3H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
0032 7B02              MOV     R3,#02H
0034 7A78              MOV     R2,#078H
0036 7904              MOV     R1,#04H
0038 C003              PUSH    AR3
003A C002              PUSH    AR2
003C C001              PUSH    AR1
003E 7BFF              MOV     R3,#0FFH
0040 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0042 7900        R     MOV     R1,#LOW CFG_TD_LIST0
0044 E9                MOV     A,R1
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 15  

0045 EA                MOV     A,R2
0046 E4                CLR     A
0047 AD01              MOV     R5,AR1
0049 AC02              MOV     R4,AR2
004B D001              POP     AR1
004D D002              POP     AR2
004F D003              POP     AR3
0051 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 466
0054 7B02              MOV     R3,#02H
0056 7A78              MOV     R2,#078H
0058 7906              MOV     R1,#06H
005A 7D08              MOV     R5,#08H
005C 7C78              MOV     R4,#078H
005E 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 467
0061 7B02              MOV     R3,#02H
0063 7A76              MOV     R2,#076H
0065 7904              MOV     R1,#04H
0067 7D10              MOV     R5,#010H
0069 7C00              MOV     R4,#00H
006B 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 468
006E 7B02              MOV     R3,#02H
0070 7A76              MOV     R2,#076H
0072 7906              MOV     R1,#06H
0074 E4                CLR     A
0075 FD                MOV     R5,A
0076 FC                MOV     R4,A
0077 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 469
007A 907029            MOV     DPTR,#07029H
007D 740B              MOV     A,#0BH
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
0080 907039            MOV     DPTR,#07039H
0083 04                INC     A
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
0085 907059            MOV     DPTR,#07059H
0088 7415              MOV     A,#015H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
008B 907069            MOV     DPTR,#07069H
008E 04                INC     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
0090 907079            MOV     DPTR,#07079H
0093 741F              MOV     A,#01FH
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
0096 907014            MOV     DPTR,#07014H
0099 7401              MOV     A,#01H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
009C         ?C0010:
                                           ; SOURCE LINE # 480
009C 907018            MOV     DPTR,#07018H
009F E0                MOVX    A,@DPTR
00A0 5401              ANL     A,#01H
00A2 70F8              JNZ     ?C0010
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 16  

00A4         ?C0011:
00A4         ?C0012:
                                           ; SOURCE LINE # 481
00A4 907028            MOV     DPTR,#07028H
00A7 E0                MOVX    A,@DPTR
00A8 5401              ANL     A,#01H
00AA 70F8              JNZ     ?C0012
00AC         ?C0013:
00AC         ?C0014:
                                           ; SOURCE LINE # 482
00AC 907038            MOV     DPTR,#07038H
00AF E0                MOVX    A,@DPTR
00B0 5401              ANL     A,#01H
00B2 70F8              JNZ     ?C0014
00B4         ?C0015:
00B4         ?C0016:
                                           ; SOURCE LINE # 483
00B4 907058            MOV     DPTR,#07058H
00B7 E0                MOVX    A,@DPTR
00B8 5401              ANL     A,#01H
00BA 70F8              JNZ     ?C0016
00BC         ?C0017:
00BC         ?C0018:
                                           ; SOURCE LINE # 484
00BC 907068            MOV     DPTR,#07068H
00BF E0                MOVX    A,@DPTR
00C0 5401              ANL     A,#01H
00C2 70F8              JNZ     ?C0018
00C4         ?C0019:
00C4         ?C0020:
                                           ; SOURCE LINE # 485
00C4 907078            MOV     DPTR,#07078H
00C7 E0                MOVX    A,@DPTR
00C8 5401              ANL     A,#01H
00CA 70F8              JNZ     ?C0020
00CC         ?C0021:
                                           ; SOURCE LINE # 488
00CC         ?C0022:
00CC 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 513
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D02              MOV     R5,#02H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 514
000D 904082            MOV     DPTR,#04082H
0010 7418              MOV     A,#018H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
0013 7B00              MOV     R3,#00H
0015 7A40              MOV     R2,#040H
0017 7984              MOV     R1,#084H
0019 7DFF              MOV     R5,#0FFH
001B 7C0F              MOV     R4,#0FH
001D 120000      E     LCALL   _cywrite16
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 17  

                                           ; SOURCE LINE # 516
0020 904086            MOV     DPTR,#04086H
0023 741B              MOV     A,#01BH
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
0026 7B00              MOV     R3,#00H
0028 7A40              MOV     R2,#040H
002A 7988              MOV     R1,#088H
002C 7D17              MOV     R5,#017H
002E 7C00              MOV     R4,#00H
0030 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 518
0033 90408A            MOV     DPTR,#0408AH
0036 7418              MOV     A,#018H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
0039 7B00              MOV     R3,#00H
003B 7A40              MOV     R2,#040H
003D 798C              MOV     R1,#08CH
003F 7D2F              MOV     R5,#02FH
0041 7C00              MOV     R4,#00H
0043 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 520
0046 90408E            MOV     DPTR,#0408EH
0049 7418              MOV     A,#018H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
004C 7B00              MOV     R3,#00H
004E 7A40              MOV     R2,#040H
0050 7990              MOV     R1,#090H
0052 7D7F              MOV     R5,#07FH
0054 7CBB              MOV     R4,#0BBH
0056 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 522
0059 904092            MOV     DPTR,#04092H
005C 7418              MOV     A,#018H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
005F 904300            MOV     DPTR,#04300H
0062 7406              MOV     A,#06H
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
0065 904200            MOV     DPTR,#04200H
0068 7452              MOV     A,#052H
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 529
006B 7B0C              MOV     R3,#0CH
006D 7A01              MOV     R2,#01H
006F 790F              MOV     R1,#0FH
0071 120000      E     LCALL   _cyread8
0074 9046A1            MOV     DPTR,#046A1H
0077 EF                MOV     A,R7
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
0079 7B00              MOV     R3,#00H
007B 7A42              MOV     R2,#042H
007D 7922              MOV     R1,#022H
007F 7D10              MOV     R5,#010H
0081 7C07              MOV     R4,#07H
0083 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 533
0086 7B00              MOV     R3,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 18  

0088 7A42              MOV     R2,#042H
008A 7920              MOV     R1,#020H
008C 7D51              MOV     R5,#051H
008E 7C12              MOV     R4,#012H
0090 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 535
0093 E4                CLR     A
0094 900000      R     MOV     DPTR,#pllLock
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
0098 7F19              MOV     R7,#019H
009A FE                MOV     R6,A
009B FD                MOV     R5,A
009C FC                MOV     R4,A
009D 900000      R     MOV     DPTR,#timeout
00A0 120000      E     LCALL   ?C?LSTXDATA
00A3         ?C0023:
00A3 900000      R     MOV     DPTR,#timeout
00A6 E0                MOVX    A,@DPTR
00A7 A3                INC     DPTR
00A8 E0                MOVX    A,@DPTR
00A9 A3                INC     DPTR
00AA E0                MOVX    A,@DPTR
00AB FE                MOV     R6,A
00AC A3                INC     DPTR
00AD E0                MOVX    A,@DPTR
00AE D3                SETB    C
00AF 9400              SUBB    A,#00H
00B1 EE                MOV     A,R6
00B2 9400              SUBB    A,#00H
00B4 404A              JC      ?C0024
00B6 A3                INC     DPTR
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 6403              XRL     A,#03H
00BB 6043              JZ      ?C0024
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
00BD 904225            MOV     DPTR,#04225H
00C0 E0                MOVX    A,@DPTR
00C1 5401              ANL     A,#01H
00C3 FE                MOV     R6,A
00C4 EF                MOV     A,R7
00C5 25E0              ADD     A,ACC
00C7 4E                ORL     A,R6
00C8 5403              ANL     A,#03H
00CA 900000      R     MOV     DPTR,#pllLock
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 539
00CE E4                CLR     A
00CF 7FE0              MOV     R7,#0E0H
00D1 7E01              MOV     R6,#01H
00D3 FD                MOV     R5,A
00D4 FC                MOV     R4,A
00D5 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 540
00D8 900000      R     MOV     DPTR,#timeout
00DB E0                MOVX    A,@DPTR
00DC FC                MOV     R4,A
00DD A3                INC     DPTR
00DE E0                MOVX    A,@DPTR
00DF FD                MOV     R5,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 19  

00E0 A3                INC     DPTR
00E1 E0                MOVX    A,@DPTR
00E2 FE                MOV     R6,A
00E3 A3                INC     DPTR
00E4 E0                MOVX    A,@DPTR
00E5 FF                MOV     R7,A
00E6 74FF              MOV     A,#0FFH
00E8 EF                MOV     A,R7
00E9 24FF              ADD     A,#0FFH
00EB FF                MOV     R7,A
00EC EE                MOV     A,R6
00ED 34FF              ADDC    A,#0FFH
00EF FE                MOV     R6,A
00F0 ED                MOV     A,R5
00F1 34FF              ADDC    A,#0FFH
00F3 FD                MOV     R5,A
00F4 EC                MOV     A,R4
00F5 34FF              ADDC    A,#0FFH
00F7 FC                MOV     R4,A
00F8 900000      R     MOV     DPTR,#timeout
00FB 120000      E     LCALL   ?C?LSTXDATA
00FE 80A3              SJMP    ?C0023
0100         ?C0024:
                                           ; SOURCE LINE # 542
0100 900000      R     MOV     DPTR,#timeout
0103 E0                MOVX    A,@DPTR
0104 A3                INC     DPTR
0105 E0                MOVX    A,@DPTR
0106 A3                INC     DPTR
0107 E0                MOVX    A,@DPTR
0108 FE                MOV     R6,A
0109 A3                INC     DPTR
010A E0                MOVX    A,@DPTR
010B 4E                ORL     A,R6
010C 7005              JNZ     ?C0026
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
010E 7F03              MOV     R7,#03H
0110 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 545
0113         ?C0026:
                                           ; SOURCE LINE # 548
0113 7B00              MOV     R3,#00H
0115 7A40              MOV     R2,#040H
0117 7904              MOV     R1,#04H
0119 7D00              MOV     R5,#00H
011B 7C01              MOV     R4,#01H
011D 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 549
0120 904004            MOV     DPTR,#04004H
0123 7407              MOV     A,#07H
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
0126 904006            MOV     DPTR,#04006H
0129 E4                CLR     A
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 551
012B 904008            MOV     DPTR,#04008H
012E 7448              MOV     A,#048H
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
0131 904004            MOV     DPTR,#04004H
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 20  

0134 E4                CLR     A
0135 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 555
0136 904009            MOV     DPTR,#04009H
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 556
013A 904001            MOV     DPTR,#04001H
013D 7402              MOV     A,#02H
013F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 558
0140 9043A2            MOV     DPTR,#043A2H
0143 E0                MOVX    A,@DPTR
0144 441F              ORL     A,#01FH
0146 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 559
0147 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 583
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
;---- Variable 'bg_xover_inl_trim' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 584
0009 EF                MOV     A,R7
000A 5407              ANL     A,#07H
000C 90586E            MOV     DPTR,#0586EH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
0010 EF                MOV     A,R7
0011 C4                SWAP    A
0012 540F              ANL     A,#0FH
0014 A3                INC     DPTR
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 586
0016 905876            MOV     DPTR,#05876H
0019 7444              MOV     A,#044H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 587
001C 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 607
;---- Variable 'enabled' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
0000 905876            MOV     DPTR,#05876H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
;---- Variable 'regValue' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 610
0005 EF                MOV     A,R7
0006 6003              JZ      ?C0029
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 612
0008 EE                MOV     A,R6
                                           ; SOURCE LINE # 613
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 21  

0009 8001              SJMP    ?C0030
000B         ?C0029:
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 616
000B EE                MOV     A,R6
                                           ; SOURCE LINE # 617
000C         ?C0030:
                                           ; SOURCE LINE # 618
000C AF06              MOV     R7,AR6
000E 905876            MOV     DPTR,#05876H
0011 EE                MOV     A,R6
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
0013 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 656
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4401              ORL     A,#01H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 658
                                           ; SOURCE LINE # 659
0016 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 662
0019 7B01              MOV     R3,#01H
001B 7A50              MOV     R2,#050H
001D 7903              MOV     R1,#03H
001F 120000      E     LCALL   _cyread8
0022 EF                MOV     A,R7
0023 4402              ORL     A,#02H
0025 FD                MOV     R5,A
0026 7B01              MOV     R3,#01H
0028 7A50              MOV     R2,#050H
002A 7903              MOV     R1,#03H
002C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 663
002F 7B01              MOV     R3,#01H
0031 7A50              MOV     R2,#050H
0033 7913              MOV     R1,#013H
0035 120000      E     LCALL   _cyread8
0038 EF                MOV     A,R7
0039 4402              ORL     A,#02H
003B FD                MOV     R5,A
003C 7B01              MOV     R3,#01H
003E 7A50              MOV     R2,#050H
0040 7913              MOV     R1,#013H
0042 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 666
0045 9043A0            MOV     DPTR,#043A0H
0048 E0                MOVX    A,@DPTR
0049 4440              ORL     A,#040H
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 22  

004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 667
004C 9043C2            MOV     DPTR,#043C2H
004F E0                MOVX    A,@DPTR
0050 4410              ORL     A,#010H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 672
0053 7B08              MOV     R3,#08H
0055 7A1F              MOV     R2,#01FH
0057 79E8              MOV     R1,#0E8H
0059 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
005C E4                CLR     A
005D F0                MOVX    @DPTR,A
005E A3                INC     DPTR
005F 7451              MOV     A,#051H
0061 F0                MOVX    @DPTR,A
0062 A3                INC     DPTR
0063 7402              MOV     A,#02H
0065 F0                MOVX    @DPTR,A
0066 7F08              MOV     R7,#08H
0068 7E00              MOV     R6,#00H
006A 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 673
006D 7B08              MOV     R3,#08H
006F 7A1F              MOV     R2,#01FH
0071 79F0              MOV     R1,#0F0H
0073 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0076 E4                CLR     A
0077 F0                MOVX    @DPTR,A
0078 A3                INC     DPTR
0079 7451              MOV     A,#051H
007B F0                MOVX    @DPTR,A
007C A3                INC     DPTR
007D 74C2              MOV     A,#0C2H
007F F0                MOVX    @DPTR,A
0080 7F08              MOV     R7,#08H
0082 7E00              MOV     R6,#00H
0084 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 674
0087 7C00        R     MOV     R4,#HIGH BS_IOPINS0_8_VAL
0089 7D00        R     MOV     R5,#LOW BS_IOPINS0_8_VAL
008B 7B00              MOV     R3,#00H
008D 7A51              MOV     R2,#051H
008F 79F2              MOV     R1,#0F2H
0091 7F08              MOV     R7,#08H
0093 7E00              MOV     R6,#00H
0095 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 675
0098 7C00        R     MOV     R4,#HIGH BS_IOPINS0_1_VAL
009A 7D00        R     MOV     R5,#LOW BS_IOPINS0_1_VAL
009C 7B00              MOV     R3,#00H
009E 7A51              MOV     R2,#051H
00A0 7910              MOV     R1,#010H
00A2 7F0A              MOV     R7,#0AH
00A4 7E00              MOV     R6,#00H
00A6 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 676
00A9 7C00        R     MOV     R4,#HIGH BS_IOPINS0_2_VAL
00AB 7D00        R     MOV     R5,#LOW BS_IOPINS0_2_VAL
00AD 7B00              MOV     R3,#00H
00AF 7A51              MOV     R2,#051H
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 23  

00B1 7922              MOV     R1,#022H
00B3 7F08              MOV     R7,#08H
00B5 7E00              MOV     R6,#00H
00B7 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 677
00BA 9044F4            MOV     DPTR,#044F4H
00BD 7401              MOV     A,#01H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 679
00C0 904322            MOV     DPTR,#04322H
00C3 E0                MOVX    A,@DPTR
00C4 4408              ORL     A,#08H
00C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
00C7 9046EC            MOV     DPTR,#046ECH
00CA E0                MOVX    A,@DPTR
00CB C3                CLR     C
00CC 9405              SUBB    A,#05H
00CE 5006              JNC     ?C0032
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 682
00D0 904689            MOV     DPTR,#04689H
00D3 743A              MOV     A,#03AH
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 683
00D6         ?C0032:
                                           ; SOURCE LINE # 687
00D6 904800            MOV     DPTR,#04800H
00D9 74F1              MOV     A,#0F1H
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 689
00DC 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 692
00DF 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 695
00E2 7B00              MOV     R3,#00H
00E4 7A43              MOV     R2,#043H
00E6 79A0              MOV     R1,#0A0H
00E8 C003              PUSH    AR3
00EA C002              PUSH    AR2
00EC 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00EF EB                MOV     A,R3
00F0 F0                MOVX    @DPTR,A
00F1 A3                INC     DPTR
00F2 EA                MOV     A,R2
00F3 F0                MOVX    @DPTR,A
00F4 A3                INC     DPTR
00F5 74B0              MOV     A,#0B0H
00F7 F0                MOVX    @DPTR,A
00F8 D002              POP     AR2
00FA D003              POP     AR3
00FC 7F0E              MOV     R7,#0EH
00FE 7E00              MOV     R6,#00H
0100 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 696
0103 9043B0            MOV     DPTR,#043B0H
0106 E0                MOVX    A,@DPTR
0107 54FD              ANL     A,#0FDH
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 697
010A 22                RET     
             ; FUNCTION cyfitter_cfg (END)
C51 COMPILER V9.51   CYFITTER_CFG                                                          11/15/2017 19:00:45 PAGE 24  




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    852    ----
   CONSTANT SIZE    =    887    ----
   XDATA SIZE       =      4       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
