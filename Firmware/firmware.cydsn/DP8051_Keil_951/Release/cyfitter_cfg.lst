C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDE
                    -BUG) WL(2) PR(.\DP8051_Keil_951\Release/cyfitter_cfg.lst) CD OT(11,SPEED) DF(CYAPP_ECC_OFFSET=1216) OJ(.\DP8051_Keil_951
                    -\Release\cyfitter_cfg.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          
   2          /*******************************************************************************
   3          * File Name: cyfitter_cfg.c
   4          * 
   5          * PSoC Creator  4.2
   6          *
   7          * Description:
   8          * This file contains device initialization code.
   9          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
  10          * This file is automatically generated by PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright (c) 2007-2018 Cypress Semiconductor.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include <string.h>
  20          #include "cytypes.h"
  21          #include "cydevice_trm.h"
  22          #include "cyfitter.h"
  23          #include "CyLib.h"
  24          #include "cyfitter_cfg.h"
  25          
  26          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  27          
  28          
  29          #if defined(__C51__) || defined(__CX51__)
  30                  #define CYPACKED
  31                  #define CYPACKED_ATTR
  32                  #define CYALIGNED
  33                  #define DMAINITSEC
  34              #define CY_CFG_UNUSED
  35                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  36          
  37          
  38          
  39                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  40                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  41                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  42          #else
                      #error Unsupported toolchain
              #endif
  45          
  46          
  47          
  48          
  49          /* Clock startup error codes                                                   */
  50          #define CYCLOCKSTART_NO_ERROR    0u
  51          #define CYCLOCKSTART_XTAL_ERROR  1u
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 2   

  52          #define CYCLOCKSTART_32KHZ_ERROR 2u
  53          #define CYCLOCKSTART_PLL_ERROR   3u
  54          #define CYCLOCKSTART_FLL_ERROR   4u
  55          #define CYCLOCKSTART_WCO_ERROR   5u
  56          
  57          
  58          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  59          /*******************************************************************************
  60          * Function Name: CyClockStartupError
  61          ********************************************************************************
  62          * Summary:
  63          *  If an error is encountered during clock configuration (crystal startup error,
  64          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  65          *  the customer, this function will stop in an infinite loop.
  66          *
  67          * Parameters:
  68          *   void
  69          *
  70          * Return:
  71          *   void
  72          *
  73          *******************************************************************************/
  74          CY_CFG_UNUSED
  75          static void CyClockStartupError(uint8 errorCode);
  76          CY_CFG_UNUSED
  77          static void CyClockStartupError(uint8 errorCode)
  78          {
  79   1          /* To remove the compiler warning if errorCode not used.                */
  80   1          errorCode = errorCode;
  81   1      
  82   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  83   1          /* we will end up here to allow the customer to implement something to  */
  84   1          /* deal with the clock condition.                                       */
  85   1      
  86   1      #ifdef CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK
                  CY_CFG_Clock_Startup_ErrorCallback();
              #else
  89   1          /*  If not using CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK, place your clock startup code here. */
  90   1          /* `#START CyClockStartupError` */
  91   1      
  92   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  93   1          /* we will end up here to allow the customer to implement something to  */
  94   1          /* deal with the clock condition.                                       */
  95   1      
  96   1          /* `#END` */
  97   1      
  98   1          while(1) {}
  99   1      #endif /* CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK */
 100   1      }
 101          #endif
 102          
 103          /* IOPORT_0 Address: CYDEV_PRTDSI_PRT0_BASE Size (bytes): 7 */
 104          #define BS_IOPORT_0_VAL ((const uint8 CYFAR *)(0x00080000u + CYAPP_ECC_OFFSET))
 105          
 106          /* IOPORT_1 Address: CYDEV_PRTDSI_PRT1_BASE Size (bytes): 7 */
 107          #define BS_IOPORT_1_VAL ((const uint8 CYFAR *)(0x00080008u + CYAPP_ECC_OFFSET))
 108          
 109          /* IOPORT_2 Address: CYDEV_PRTDSI_PRT2_BASE Size (bytes): 7 */
 110          #define BS_IOPORT_2_VAL ((const uint8 CYFAR *)(0x00080010u + CYAPP_ECC_OFFSET))
 111          
 112          /* IOPORT_7 Address: CYDEV_PRTDSI_PRT12_BASE Size (bytes): 6 */
 113          #define BS_IOPORT_7_VAL ((const uint8 CYFAR *)(0x00080018u + CYAPP_ECC_OFFSET))
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 3   

 114          
 115          /* IOPORT_8 Address: CYDEV_PRTDSI_PRT15_BASE Size (bytes): 7 */
 116          #define BS_IOPORT_8_VAL ((const uint8 CYFAR *)(0x00080020u + CYAPP_ECC_OFFSET))
 117          
 118          /* IDMUX_IRQ Address: CYREG_IDMUX_IRQ_CTL0 Size (bytes): 8 */
 119          #define BS_IDMUX_IRQ_VAL ((const uint8 CYFAR *)(0x00080028u + CYAPP_ECC_OFFSET))
 120          
 121          /* TMR0 Address: CYREG_TMR0_CFG0 Size (bytes): 12 */
 122          #define BS_TMR0_VAL ((const uint8 CYFAR *)(0x00080030u + CYAPP_ECC_OFFSET))
 123          
 124          /* UDB_1_4_1_CONFIG Address: CYDEV_UCFG_B0_P1_U0_BASE Size (bytes): 128 */
 125          #define BS_UDB_1_4_1_CONFIG_VAL ((const uint8 CYFAR *)(0x0008003Cu + CYAPP_ECC_OFFSET))
 126          
 127          /* UDB_1_4_0_CONFIG Address: CYDEV_UCFG_B0_P1_U1_BASE Size (bytes): 128 */
 128          #define BS_UDB_1_4_0_CONFIG_VAL ((const uint8 CYFAR *)(0x000800BCu + CYAPP_ECC_OFFSET))
 129          
 130          /* UDB_1_3_0_CONFIG Address: CYDEV_UCFG_B0_P2_U0_BASE Size (bytes): 128 */
 131          #define BS_UDB_1_3_0_CONFIG_VAL ((const uint8 CYFAR *)(0x0008013Cu + CYAPP_ECC_OFFSET))
 132          
 133          /* UDB_1_3_1_CONFIG Address: CYDEV_UCFG_B0_P2_U1_BASE Size (bytes): 128 */
 134          #define BS_UDB_1_3_1_CONFIG_VAL ((const uint8 CYFAR *)(0x000801BCu + CYAPP_ECC_OFFSET))
 135          
 136          /* UDB_1_2_1_CONFIG Address: CYDEV_UCFG_B0_P3_U0_BASE Size (bytes): 128 */
 137          #define BS_UDB_1_2_1_CONFIG_VAL ((const uint8 CYFAR *)(0x0008023Cu + CYAPP_ECC_OFFSET))
 138          
 139          /* UDB_1_2_0_CONFIG Address: CYDEV_UCFG_B0_P3_U1_BASE Size (bytes): 128 */
 140          #define BS_UDB_1_2_0_CONFIG_VAL ((const uint8 CYFAR *)(0x000802BCu + CYAPP_ECC_OFFSET))
 141          
 142          /* UDB_0_2_0_CONFIG Address: CYDEV_UCFG_B0_P4_U1_BASE Size (bytes): 128 */
 143          #define BS_UDB_0_2_0_CONFIG_VAL ((const uint8 CYFAR *)(0x0008033Cu + CYAPP_ECC_OFFSET))
 144          
 145          /* UDB_0_4_1_CONFIG Address: CYDEV_UCFG_B0_P6_U0_BASE Size (bytes): 128 */
 146          #define BS_UDB_0_4_1_CONFIG_VAL ((const uint8 CYFAR *)(0x000803BCu + CYAPP_ECC_OFFSET))
 147          
 148          /* UDB_0_4_0_CONFIG Address: CYDEV_UCFG_B0_P6_U1_BASE Size (bytes): 128 */
 149          #define BS_UDB_0_4_0_CONFIG_VAL ((const uint8 CYFAR *)(0x0008043Cu + CYAPP_ECC_OFFSET))
 150          
 151          /* UDB_0_5_0_CONFIG Address: CYDEV_UCFG_B0_P7_U0_BASE Size (bytes): 128 */
 152          #define BS_UDB_0_5_0_CONFIG_VAL ((const uint8 CYFAR *)(0x000804BCu + CYAPP_ECC_OFFSET))
 153          
 154          /* UDB_0_5_1_CONFIG Address: CYDEV_UCFG_B0_P7_U1_BASE Size (bytes): 128 */
 155          #define BS_UDB_0_5_1_CONFIG_VAL ((const uint8 CYFAR *)(0x0008053Cu + CYAPP_ECC_OFFSET))
 156          
 157          /* UDB_1_0_0_CONFIG Address: CYDEV_UCFG_B1_P2_U0_BASE Size (bytes): 128 */
 158          #define BS_UDB_1_0_0_CONFIG_VAL ((const uint8 CYFAR *)(0x000805BCu + CYAPP_ECC_OFFSET))
 159          
 160          /* UDB_1_0_1_CONFIG Address: CYDEV_UCFG_B1_P2_U1_BASE Size (bytes): 128 */
 161          #define BS_UDB_1_0_1_CONFIG_VAL ((const uint8 CYFAR *)(0x0008063Cu + CYAPP_ECC_OFFSET))
 162          
 163          /* UDB_1_1_1_CONFIG Address: CYDEV_UCFG_B1_P3_U0_BASE Size (bytes): 128 */
 164          #define BS_UDB_1_1_1_CONFIG_VAL ((const uint8 CYFAR *)(0x000806BCu + CYAPP_ECC_OFFSET))
 165          
 166          /* UDB_1_1_0_CONFIG Address: CYDEV_UCFG_B1_P3_U1_BASE Size (bytes): 128 */
 167          #define BS_UDB_1_1_0_CONFIG_VAL ((const uint8 CYFAR *)(0x0008073Cu + CYAPP_ECC_OFFSET))
 168          
 169          /* UWRK_B0_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070u Size (bytes): 32 */
 170          #define BS_UWRK_B0_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)(0x000807BCu + CYAPP_ECC_OFFSET))
 171          
 172          /* UCFG_BCTL1 Address: CYREG_BCTL1_MDCLK_EN Size (bytes): 16 */
 173          #define BS_UCFG_BCTL1_VAL ((const uint8 CYFAR *)(0x000807DCu + CYAPP_ECC_OFFSET))
 174          
 175          /* UCFG_BCTL0 Address: CYREG_BCTL0_MDCLK_EN Size (bytes): 16 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 4   

 176          #define BS_UCFG_BCTL0_VAL ((const uint8 CYFAR *)(0x000807ECu + CYAPP_ECC_OFFSET))
 177          
 178          /* DSI0_0_HV_ROUTING Address: CYDEV_UCFG_DSI13_BASE + 0x00000080u Size (bytes): 128 */
 179          #define BS_DSI0_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000807FCu + CYAPP_ECC_OFFSET))
 180          
 181          /* DSISWITCH_0_1 Address: CYDEV_UCFG_DSI12_BASE Size (bytes): 128 */
 182          #define BS_DSISWITCH_0_1_VAL ((const uint8 CYFAR *)(0x0008087Cu + CYAPP_ECC_OFFSET))
 183          
 184          /* DSI0_1_HV_ROUTING Address: CYDEV_UCFG_DSI12_BASE + 0x00000080u Size (bytes): 128 */
 185          #define BS_DSI0_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000808FCu + CYAPP_ECC_OFFSET))
 186          
 187          /* DSI0_2_HV_ROUTING Address: CYDEV_UCFG_DSI7_BASE + 0x00000080u Size (bytes): 128 */
 188          #define BS_DSI0_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x0008097Cu + CYAPP_ECC_OFFSET))
 189          
 190          /* DSI0_3_HV_ROUTING Address: CYDEV_UCFG_DSI6_BASE + 0x00000080u Size (bytes): 128 */
 191          #define BS_DSI0_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000809FCu + CYAPP_ECC_OFFSET))
 192          
 193          /* DSISWITCH_0_4 Address: CYDEV_UCFG_DSI5_BASE Size (bytes): 128 */
 194          #define BS_DSISWITCH_0_4_VAL ((const uint8 CYFAR *)(0x00080A7Cu + CYAPP_ECC_OFFSET))
 195          
 196          /* DSI0_4_HV_ROUTING Address: CYDEV_UCFG_DSI5_BASE + 0x00000080u Size (bytes): 128 */
 197          #define BS_DSI0_4_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080AFCu + CYAPP_ECC_OFFSET))
 198          
 199          /* DSI0_5_HV_ROUTING Address: CYDEV_UCFG_DSI4_BASE + 0x00000080u Size (bytes): 128 */
 200          #define BS_DSI0_5_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080B7Cu + CYAPP_ECC_OFFSET))
 201          
 202          /* UDB_1_0_HV_ROUTING Address: CYDEV_UCFG_B1_P5_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 203          #define BS_UDB_1_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080BFCu + CYAPP_ECC_OFFSET))
 204          
 205          /* UDBSWITCH_1_0 Address: CYDEV_UCFG_B1_P2_ROUTE_BASE Size (bytes): 128 */
 206          #define BS_UDBSWITCH_1_0_VAL ((const uint8 CYFAR *)(0x00080C7Cu + CYAPP_ECC_OFFSET))
 207          
 208          /* UDB_2_0_HV_ROUTING Address: CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 209          #define BS_UDB_2_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080CFCu + CYAPP_ECC_OFFSET))
 210          
 211          /* UDB_1_1_HV_ROUTING Address: CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 212          #define BS_UDB_1_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080D7Cu + CYAPP_ECC_OFFSET))
 213          
 214          /* UDBSWITCH_1_1 Address: CYDEV_UCFG_B1_P3_ROUTE_BASE Size (bytes): 128 */
 215          #define BS_UDBSWITCH_1_1_VAL ((const uint8 CYFAR *)(0x00080DFCu + CYAPP_ECC_OFFSET))
 216          
 217          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 218          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080E7Cu + CYAPP_ECC_OFFSET))
 219          
 220          /* UDBSWITCH_0_2 Address: CYDEV_UCFG_B0_P4_ROUTE_BASE Size (bytes): 128 */
 221          #define BS_UDBSWITCH_0_2_VAL ((const uint8 CYFAR *)(0x00080EFCu + CYAPP_ECC_OFFSET))
 222          
 223          /* UDB_1_2_HV_ROUTING Address: CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 224          #define BS_UDB_1_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080F7Cu + CYAPP_ECC_OFFSET))
 225          
 226          /* UDBSWITCH_1_2 Address: CYDEV_UCFG_B0_P3_ROUTE_BASE Size (bytes): 128 */
 227          #define BS_UDBSWITCH_1_2_VAL ((const uint8 CYFAR *)(0x00080FFCu + CYAPP_ECC_OFFSET))
 228          
 229          /* UDB_2_2_HV_ROUTING Address: CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 230          #define BS_UDB_2_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x0008107Cu + CYAPP_ECC_OFFSET))
 231          
 232          /* UDB_1_3_HV_ROUTING Address: CYDEV_UCFG_B0_P5_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 233          #define BS_UDB_1_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000810FCu + CYAPP_ECC_OFFSET))
 234          
 235          /* UDBSWITCH_1_3 Address: CYDEV_UCFG_B0_P2_ROUTE_BASE Size (bytes): 128 */
 236          #define BS_UDBSWITCH_1_3_VAL ((const uint8 CYFAR *)(0x0008117Cu + CYAPP_ECC_OFFSET))
 237          
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 5   

 238          /* UDB_2_3_HV_ROUTING Address: CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 239          #define BS_UDB_2_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000811FCu + CYAPP_ECC_OFFSET))
 240          
 241          /* UDBSWITCH_0_4 Address: CYDEV_UCFG_B0_P6_ROUTE_BASE Size (bytes): 128 */
 242          #define BS_UDBSWITCH_0_4_VAL ((const uint8 CYFAR *)(0x0008127Cu + CYAPP_ECC_OFFSET))
 243          
 244          /* UDB_1_4_HV_ROUTING Address: CYDEV_UCFG_B0_P6_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 245          #define BS_UDB_1_4_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000812FCu + CYAPP_ECC_OFFSET))
 246          
 247          /* UDBSWITCH_1_4 Address: CYDEV_UCFG_B0_P1_ROUTE_BASE Size (bytes): 128 */
 248          #define BS_UDBSWITCH_1_4_VAL ((const uint8 CYFAR *)(0x0008137Cu + CYAPP_ECC_OFFSET))
 249          
 250          /* UDB_2_4_HV_ROUTING Address: CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 251          #define BS_UDB_2_4_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000813FCu + CYAPP_ECC_OFFSET))
 252          
 253          /* UDBSWITCH_0_5 Address: CYDEV_UCFG_B0_P7_ROUTE_BASE Size (bytes): 128 */
 254          #define BS_UDBSWITCH_0_5_VAL ((const uint8 CYFAR *)(0x0008147Cu + CYAPP_ECC_OFFSET))
 255          
 256          /* UDB_1_5_HV_ROUTING Address: CYDEV_UCFG_B0_P7_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 257          #define BS_UDB_1_5_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000814FCu + CYAPP_ECC_OFFSET))
 258          
 259          /* UDB_2_5_HV_ROUTING Address: CYDEV_UCFG_B0_P0_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 260          #define BS_UDB_2_5_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x0008157Cu + CYAPP_ECC_OFFSET))
 261          
 262          /* DSISWITCH_1_0 Address: CYDEV_UCFG_DSI9_BASE Size (bytes): 128 */
 263          #define BS_DSISWITCH_1_0_VAL ((const uint8 CYFAR *)(0x000815FCu + CYAPP_ECC_OFFSET))
 264          
 265          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080u Size (bytes): 128 */
 266          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x0008167Cu + CYAPP_ECC_OFFSET))
 267          
 268          /* DSISWITCH_1_1 Address: CYDEV_UCFG_DSI8_BASE Size (bytes): 128 */
 269          #define BS_DSISWITCH_1_1_VAL ((const uint8 CYFAR *)(0x000816FCu + CYAPP_ECC_OFFSET))
 270          
 271          /* DSI3_1_HV_ROUTING Address: CYDEV_UCFG_DSI8_BASE + 0x00000080u Size (bytes): 128 */
 272          #define BS_DSI3_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x0008177Cu + CYAPP_ECC_OFFSET))
 273          
 274          /* DSISWITCH_1_2 Address: CYDEV_UCFG_DSI3_BASE Size (bytes): 128 */
 275          #define BS_DSISWITCH_1_2_VAL ((const uint8 CYFAR *)(0x000817FCu + CYAPP_ECC_OFFSET))
 276          
 277          /* DSI3_2_HV_ROUTING Address: CYDEV_UCFG_DSI3_BASE + 0x00000080u Size (bytes): 128 */
 278          #define BS_DSI3_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x0008187Cu + CYAPP_ECC_OFFSET))
 279          
 280          /* DSISWITCH_1_3 Address: CYDEV_UCFG_DSI2_BASE Size (bytes): 128 */
 281          #define BS_DSISWITCH_1_3_VAL ((const uint8 CYFAR *)(0x000818FCu + CYAPP_ECC_OFFSET))
 282          
 283          /* DSI3_3_HV_ROUTING Address: CYDEV_UCFG_DSI2_BASE + 0x00000080u Size (bytes): 128 */
 284          #define BS_DSI3_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x0008197Cu + CYAPP_ECC_OFFSET))
 285          
 286          /* DSISWITCH_1_4 Address: CYDEV_UCFG_DSI1_BASE Size (bytes): 128 */
 287          #define BS_DSISWITCH_1_4_VAL ((const uint8 CYFAR *)(0x000819FCu + CYAPP_ECC_OFFSET))
 288          
 289          /* DSI3_4_HV_ROUTING Address: CYDEV_UCFG_DSI1_BASE + 0x00000080u Size (bytes): 128 */
 290          #define BS_DSI3_4_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00081A7Cu + CYAPP_ECC_OFFSET))
 291          
 292          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 293          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)(0x00081AFCu + CYAPP_ECC_OFFSET))
 294          
 295          /* IOPINS0_7 Address: CYREG_PRT12_DM0 Size (bytes): 8 */
 296          #define BS_IOPINS0_7_VAL ((const uint8 CYFAR *)(0x00081B04u + CYAPP_ECC_OFFSET))
 297          
 298          /* IOPINS0_8 Address: CYREG_PRT15_DM0 Size (bytes): 8 */
 299          #define BS_IOPINS0_8_VAL ((const uint8 CYFAR *)(0x00081B0Cu + CYAPP_ECC_OFFSET))
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 6   

 300          
 301          /* IOPINS0_1 Address: CYREG_PRT1_DR Size (bytes): 10 */
 302          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)(0x00081B14u + CYAPP_ECC_OFFSET))
 303          
 304          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 305          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)(0x00081B20u + CYAPP_ECC_OFFSET))
 306          
 307          
 308          /*******************************************************************************
 309          * Function Name: cfg_dma_init
 310          ********************************************************************************
 311          * Summary:
 312          *  This function is used to copy device configuration data from constant values
 313          *  stored in memory into the proper chip configuration registers using DMA.  It
 314          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 315          *
 316          * Parameters:  
 317          *   void
 318          *
 319          * Return:
 320          *   void
 321          *
 322          *******************************************************************************/
 323          static void cfg_dma_init(void);
 324          static void cfg_dma_init(void)
 325          {
 326   1              /* TD structure for big-endian systems. Requires 2-byte endian swap */
 327   1              CYPACKED struct td_t {
 328   1                      uint16 size;
 329   1                      uint8 flags;
 330   1                      uint8 next_td_ptr;
 331   1                      uint16 src;
 332   1                      uint16 dest;
 333   1              } CYPACKED_ATTR;
 334   1      
 335   1              /* DSISWITCH_1_5 Address: CYDEV_UCFG_DSI0_BASE Size (bytes): 128 */
 336   1              DMAINITSEC static const uint8 CYCODE BS_DSISWITCH_1_5_VAL[] = {
 337   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 338   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 339   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 340   1                      0x20u, 0x00u, 0x20u, 0x00u, 0x00u, 0x00u, 0x20u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 341   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 342   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 343   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 344   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u};
 345   1      
 346   1              /* DSI3_5_HV_ROUTING Address: CYDEV_UCFG_DSI0_BASE + 0x00000080u Size (bytes): 128 */
 347   1              DMAINITSEC static const uint8 CYCODE BS_DSI3_5_HV_ROUTING_VAL[] = {
 348   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 349   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 350   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 7   

 351   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 352   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x30u, 0x00u, 0x00u,
             - 0x00u, 
 353   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 354   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u, 
 355   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
             - 0x00u};
 356   1      
 357   1              /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 358   1              DMAINITSEC static const uint8 CYCODE CH1_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
             -, 0x00u };
 359   1      
 360   1              /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 361   1              DMAINITSEC static const uint8 CYCODE CH2_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x01u
             -, 0x00u };
 362   1      
 363   1              /* PHUB_CH4_CFGMEM_CFG0/1 initialization data */
 364   1              DMAINITSEC static const uint8 CYCODE CH4_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x10u, 0x00u, 0x01u
             -, 0x00u };
 365   1      
 366   1              /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 367   1              DMAINITSEC static const uint8 CYCODE CH5_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x00u
             -, 0x00u };
 368   1      
 369   1              /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 370   1              DMAINITSEC static const uint8 CYCODE CH6_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x01u
             -, 0x00u };
 371   1      
 372   1              /* Initialization data for each DMA channel's TD registers */
 373   1              DMAINITSEC static const uint8 CYCODE DMA_TD_START_CMD[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x01u };
 374   1      
 375   1              CYALIGNED static uint32 CYXDATA DMA_ZERO_VAL;
 376   1      
 377   1              /* This table holds all of the initialization data necessary for the DMA
 378   1                 process to transfer data from the source location to the destination. */
 379   1              DMAINITSEC static const struct td_t CYCODE CFG_TD_LIST0[] = {
 380   1                      /* Size, Flags, Next, Source, Destination */
 381   1                      { 8u, 0x23u, 0x02u, (uint16)(uint32)(CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },      /* TD 1 */
 382   1                      { 8u, 0x23u, 0x03u, (uint16)(uint32)(CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },      /* TD 2 */
 383   1                      { 8u, 0x23u, 0x04u, (uint16)(uint32)(CH4_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM4_CFG0) },      /* TD 3 */
 384   1                      { 8u, 0x23u, 0x05u, (uint16)(uint32)(CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },      /* TD 4 */
 385   1                      { 8u, 0x23u, 0x06u, (uint16)(uint32)(CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },      /* TD 5 */
 386   1                      { 5u, 0x23u, 0x07u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },   /* TD 6 */
 387   1                      { 5u, 0x23u, 0x08u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },   /* TD 7 */
 388   1                      { 5u, 0x23u, 0x09u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH4_BASIC_CFG) },   /* TD 8 */
 389   1                      { 5u, 0x23u, 0x0Au, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },   /* TD 9 */
 390   1                      { 5u, 0x23u, 0xFEu, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },   /* TD 10 *
             -/
 391   1                      { 64u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT3_DR) },        /* TD 11 */
 392   1                      { 384u, 0x22u, 0x0Du, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },    /* TD 12 */
 393   1                      { 128u, 0x22u, 0x0Eu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P4_U0_BASE) },    /* TD 13 */
 394   1                      { 384u, 0x22u, 0x0Fu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P5_U0_BASE) },    /* TD 14 */
 395   1                      { 384u, 0x22u, 0x10u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },    /* TD 15 */
 396   1                      { 384u, 0x22u, 0x11u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P5_U0_BASE) },    /* TD 16 */
 397   1                      { 128u, 0x22u, 0x12u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE) },        /* TD 17 */
 398   1                      { 128u, 0x22u, 0x13u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE) },        /* TD 18 */
 399   1                      { 128u, 0x22u, 0x14u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE) },        /* TD 19 */
 400   1                      { 128u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE) },       /* TD 20 */
 401   1                      { 128u, 0x23u, 0x16u, (uint16)(uint32)(BS_DSISWITCH_1_5_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) }, /* TD 21
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 8   

             - */
 402   1                      { 128u, 0x23u, 0xFEu, (uint16)(uint32)(BS_DSI3_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE + 0x0000
             -0080u) },        /* TD 22 */
 403   1                      { 7u, 0x23u, 0x18u, (uint16)(uint32)(BS_IOPORT_0_VAL), (uint16)(CYDEV_PRTDSI_PRT0_BASE) },      /* TD 23 */
 404   1                      { 7u, 0x23u, 0x19u, (uint16)(uint32)(BS_IOPORT_1_VAL), (uint16)(CYDEV_PRTDSI_PRT1_BASE) },      /* TD 24 */
 405   1                      { 7u, 0x23u, 0x1Au, (uint16)(uint32)(BS_IOPORT_2_VAL), (uint16)(CYDEV_PRTDSI_PRT2_BASE) },      /* TD 25 */
 406   1                      { 6u, 0x23u, 0x1Bu, (uint16)(uint32)(BS_IOPORT_7_VAL), (uint16)(CYDEV_PRTDSI_PRT12_BASE) },     /* TD 26 */
 407   1                      { 7u, 0x23u, 0x1Cu, (uint16)(uint32)(BS_IOPORT_8_VAL), (uint16)(CYDEV_PRTDSI_PRT15_BASE) },     /* TD 27 */
 408   1                      { 12u, 0x23u, 0x1Du, (uint16)(uint32)(BS_TMR0_VAL), (uint16)(CYREG_TMR0_CFG0) },        /* TD 28 */
 409   1                      { 32u, 0x23u, 0xFEu, (uint16)(uint32)(BS_UWRK_B0_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B0_BAS
             -E + 0x00000070u) },   /* TD 29 */
 410   1                      { 8u, 0x23u, 0x1Fu, (uint16)(uint32)(BS_IDMUX_IRQ_VAL), (uint16)(CYREG_IDMUX_IRQ_CTL0) },       /* TD 30 */
 411   1                      { 128u, 0x23u, 0x20u, (uint16)(uint32)(BS_UDB_1_4_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P1_U0_BASE) },  /
             -* TD 31 */
 412   1                      { 128u, 0x23u, 0x21u, (uint16)(uint32)(BS_UDB_1_4_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P1_U1_BASE) },  /
             -* TD 32 */
 413   1                      { 128u, 0x23u, 0x22u, (uint16)(uint32)(BS_UDB_1_3_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P2_U0_BASE) },  /
             -* TD 33 */
 414   1                      { 128u, 0x23u, 0x23u, (uint16)(uint32)(BS_UDB_1_3_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P2_U1_BASE) },  /
             -* TD 34 */
 415   1                      { 128u, 0x23u, 0x24u, (uint16)(uint32)(BS_UDB_1_2_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P3_U0_BASE) },  /
             -* TD 35 */
 416   1                      { 128u, 0x23u, 0x25u, (uint16)(uint32)(BS_UDB_1_2_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P3_U1_BASE) },  /
             -* TD 36 */
 417   1                      { 128u, 0x23u, 0x26u, (uint16)(uint32)(BS_UDB_0_2_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P4_U1_BASE) },  /
             -* TD 37 */
 418   1                      { 128u, 0x23u, 0x27u, (uint16)(uint32)(BS_UDB_0_4_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P6_U0_BASE) },  /
             -* TD 38 */
 419   1                      { 128u, 0x23u, 0x28u, (uint16)(uint32)(BS_UDB_0_4_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P6_U1_BASE) },  /
             -* TD 39 */
 420   1                      { 128u, 0x23u, 0x29u, (uint16)(uint32)(BS_UDB_0_5_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P7_U0_BASE) },  /
             -* TD 40 */
 421   1                      { 128u, 0x23u, 0x2Au, (uint16)(uint32)(BS_UDB_0_5_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P7_U1_BASE) },  /
             -* TD 41 */
 422   1                      { 128u, 0x23u, 0x2Bu, (uint16)(uint32)(BS_UDB_1_0_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },  /
             -* TD 42 */
 423   1                      { 128u, 0x23u, 0x2Cu, (uint16)(uint32)(BS_UDB_1_0_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P2_U1_BASE) },  /
             -* TD 43 */
 424   1                      { 128u, 0x23u, 0x2Du, (uint16)(uint32)(BS_UDB_1_1_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P3_U0_BASE) },  /
             -* TD 44 */
 425   1                      { 128u, 0x23u, 0x2Eu, (uint16)(uint32)(BS_UDB_1_1_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P3_U1_BASE) },  /
             -* TD 45 */
 426   1                      { 16u, 0x23u, 0x2Fu, (uint16)(uint32)(BS_UCFG_BCTL1_VAL), (uint16)(CYREG_BCTL1_MDCLK_EN) },     /* TD 46 */
 427   1                      { 16u, 0x23u, 0x30u, (uint16)(uint32)(BS_UCFG_BCTL0_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) },     /* TD 47 */
 428   1                      { 128u, 0x23u, 0x31u, (uint16)(uint32)(BS_DSI0_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE + 0x000
             -00080u) },        /* TD 48 */
 429   1                      { 128u, 0x23u, 0x32u, (uint16)(uint32)(BS_DSISWITCH_0_1_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },        /* TD 4
             -9 */
 430   1                      { 128u, 0x23u, 0x33u, (uint16)(uint32)(BS_DSI0_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE + 0x000
             -00080u) },        /* TD 50 */
 431   1                      { 128u, 0x23u, 0x34u, (uint16)(uint32)(BS_DSI0_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE + 0x0000
             -0080u) },        /* TD 51 */
 432   1                      { 128u, 0x23u, 0x35u, (uint16)(uint32)(BS_DSI0_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE + 0x0000
             -0080u) },        /* TD 52 */
 433   1                      { 128u, 0x23u, 0x36u, (uint16)(uint32)(BS_DSISWITCH_0_4_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE) }, /* TD 53
             - */
 434   1                      { 128u, 0x23u, 0x37u, (uint16)(uint32)(BS_DSI0_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE + 0x0000
             -0080u) },        /* TD 54 */
 435   1                      { 128u, 0x23u, 0x38u, (uint16)(uint32)(BS_DSI0_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE + 0x0000
             -0080u) },        /* TD 55 */
 436   1                      { 128u, 0x23u, 0x39u, (uint16)(uint32)(BS_UDB_1_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P5_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 56 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 9   

 437   1                      { 128u, 0x23u, 0x3Au, (uint16)(uint32)(BS_UDBSWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE) },  /
             -* TD 57 */
 438   1                      { 128u, 0x23u, 0x3Bu, (uint16)(uint32)(BS_UDB_2_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 58 */
 439   1                      { 128u, 0x23u, 0x3Cu, (uint16)(uint32)(BS_UDB_1_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P4_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 59 */
 440   1                      { 128u, 0x23u, 0x3Du, (uint16)(uint32)(BS_UDBSWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE) },  /
             -* TD 60 */
 441   1                      { 128u, 0x23u, 0x3Eu, (uint16)(uint32)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 61 */
 442   1                      { 128u, 0x23u, 0x3Fu, (uint16)(uint32)(BS_UDBSWITCH_0_2_VAL), (uint16)(CYDEV_UCFG_B0_P4_ROUTE_BASE) },  /
             -* TD 62 */
 443   1                      { 128u, 0x23u, 0x40u, (uint16)(uint32)(BS_UDB_1_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P4_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 63 */
 444   1                      { 128u, 0x23u, 0x41u, (uint16)(uint32)(BS_UDBSWITCH_1_2_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE) },  /
             -* TD 64 */
 445   1                      { 128u, 0x23u, 0x42u, (uint16)(uint32)(BS_UDB_2_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 65 */
 446   1                      { 128u, 0x23u, 0x43u, (uint16)(uint32)(BS_UDB_1_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P5_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 66 */
 447   1                      { 128u, 0x23u, 0x44u, (uint16)(uint32)(BS_UDBSWITCH_1_3_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE) },  /
             -* TD 67 */
 448   1                      { 128u, 0x23u, 0x45u, (uint16)(uint32)(BS_UDB_2_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 68 */
 449   1                      { 128u, 0x23u, 0x46u, (uint16)(uint32)(BS_UDBSWITCH_0_4_VAL), (uint16)(CYDEV_UCFG_B0_P6_ROUTE_BASE) },  /
             -* TD 69 */
 450   1                      { 128u, 0x23u, 0x47u, (uint16)(uint32)(BS_UDB_1_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P6_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 70 */
 451   1                      { 128u, 0x23u, 0x48u, (uint16)(uint32)(BS_UDBSWITCH_1_4_VAL), (uint16)(CYDEV_UCFG_B0_P1_ROUTE_BASE) },  /
             -* TD 71 */
 452   1                      { 128u, 0x23u, 0x49u, (uint16)(uint32)(BS_UDB_2_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P1_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 72 */
 453   1                      { 128u, 0x23u, 0x4Au, (uint16)(uint32)(BS_UDBSWITCH_0_5_VAL), (uint16)(CYDEV_UCFG_B0_P7_ROUTE_BASE) },  /
             -* TD 73 */
 454   1                      { 128u, 0x23u, 0x4Bu, (uint16)(uint32)(BS_UDB_1_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P7_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 74 */
 455   1                      { 128u, 0x23u, 0x4Cu, (uint16)(uint32)(BS_UDB_2_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P0_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 75 */
 456   1                      { 128u, 0x23u, 0x4Du, (uint16)(uint32)(BS_DSISWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) }, /* TD 76
             - */
 457   1                      { 128u, 0x23u, 0x4Eu, (uint16)(uint32)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x0000
             -0080u) },        /* TD 77 */
 458   1                      { 128u, 0x23u, 0x4Fu, (uint16)(uint32)(BS_DSISWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE) }, /* TD 78
             - */
 459   1                      { 128u, 0x23u, 0x50u, (uint16)(uint32)(BS_DSI3_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE + 0x0000
             -0080u) },        /* TD 79 */
 460   1                      { 128u, 0x23u, 0x51u, (uint16)(uint32)(BS_DSISWITCH_1_2_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE) }, /* TD 80
             - */
 461   1                      { 128u, 0x23u, 0x52u, (uint16)(uint32)(BS_DSI3_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE + 0x0000
             -0080u) },        /* TD 81 */
 462   1                      { 128u, 0x23u, 0x53u, (uint16)(uint32)(BS_DSISWITCH_1_3_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE) }, /* TD 82
             - */
 463   1                      { 128u, 0x23u, 0x54u, (uint16)(uint32)(BS_DSI3_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE + 0x0000
             -0080u) },        /* TD 83 */
 464   1                      { 128u, 0x23u, 0x55u, (uint16)(uint32)(BS_DSISWITCH_1_4_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE) }, /* TD 84
             - */
 465   1                      { 128u, 0x23u, 0xFEu, (uint16)(uint32)(BS_DSI3_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE + 0x0000
             -0080u) },        /* TD 85 */
 466   1              };
 467   1      
 468   1              DMA_ZERO_VAL = 0u;
 469   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG0, 0x10u);    /* set burstcnt */
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 10  

 470   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_CFG, 0x01u);   /* enable ch0 */
 471   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH0_BASIC_STATUS+1u), 0x00u);   /* set first TD to 0 */
 472   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD0, 85u*8u);       /* transfer size */
 473   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+2u), 0x01u);    /* set next TD to 1 */
 474   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+3u), 0xA3u);    /* set TD flags */
 475   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD1, (uint16)((uint32)CFG_TD_LIST0 & 0x0000FFFFu)); /
             -* set td0's src addr */
 476   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD1+2u), CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst a
             -ddr */
 477   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG1, (uint16)(CYDEV_FLS_BASE >> 16));  /* set ch0's src h
             -igh addr */
 478   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_CFGMEM0_CFG1+2u), (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));     /* se
             -t ch0's dst high addr */
 479   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH1_BASIC_STATUS+1u), 0x0Bu);   /* ch1 first TD: 11 */
 480   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH2_BASIC_STATUS+1u), 0x0Cu);   /* ch2 first TD: 12 */
 481   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH4_BASIC_STATUS+1u), 0x15u);   /* ch4 first TD: 21 */
 482   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH5_BASIC_STATUS+1u), 0x17u);   /* ch5 first TD: 23 */
 483   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH6_BASIC_STATUS+1u), 0x1Eu);   /* ch6 first TD: 30 */
 484   1      
 485   1              CY_CFG_MEMORY_BARRIER();
 486   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_ACTION, 0x01u); /* cpu_req */
 487   1              CY_CFG_MEMORY_BARRIER();
 488   1      
 489   1              /* Wait for all DMA transfers to complete */
 490   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 491   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 492   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 493   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH4_BASIC_STATUS) & 0x01u)){}
 494   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 495   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 496   1      
 497   1      
 498   1      }
 499          /*******************************************************************************
 500          * Function Name: ClockSetup
 501          ********************************************************************************
 502          *
 503          * Summary:
 504          *  Performs the initialization of all of the clocks in the device based on the
 505          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 506          *  clocks and setting the necessary dividers to produce the desired frequency. 
 507          *
 508          * Parameters:
 509          *  void
 510          *
 511          * Return:
 512          *  void
 513          *
 514          *******************************************************************************/
 515          static void ClockSetup(void);
 516          static void ClockSetup(void)
 517          {
 518   1              uint32 timeout;
 519   1              uint8 pllLock;
 520   1      
 521   1      
 522   1              /* Configure Digital Clocks based on settings from Clock DWR */
 523   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0002u);
 524   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x18u);
 525   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x0017u);
 526   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG1_CFG0 + 0x2u), 0x18u);
 527   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG2_CFG0), 0x002Fu);
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 11  

 528   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG2_CFG0 + 0x2u), 0x18u);
 529   1      
 530   1              /* Configure ILO based on settings from Clock DWR */
 531   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x06u);
 532   1      
 533   1              /* Configure IMO based on settings from Clock DWR */
 534   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x52u);
 535   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_USB)));
 536   1      
 537   1              /* Configure PLL based on settings from Clock DWR */
 538   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0710u);
 539   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 540   1              /* Wait up to 250us for the PLL to lock */
 541   1              pllLock = 0u;
 542   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 543   1              { 
 544   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 545   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 546   2              }
 547   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 548   1              if (timeout == 0u)
 549   1              {
 550   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 551   2              }
 552   1      
 553   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 554   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 555   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 556   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 557   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 558   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 559   1      
 560   1              /* Configure USB Clock based on settings from Clock DWR */
 561   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_UCFG), 0x00u);
 562   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 563   1      
 564   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x07u
             -)));
 565   1      }
 566          
 567          
 568          /* Analog API Functions */
 569          
 570          
 571          /*******************************************************************************
 572          * Function Name: AnalogSetDefault
 573          ********************************************************************************
 574          *
 575          * Summary:
 576          *  Sets up the analog portions of the chip to default values based on chip
 577          *  configuration options from the project.
 578          *
 579          * Parameters:
 580          *  void
 581          *
 582          * Return:
 583          *  void
 584          *
 585          *******************************************************************************/
 586          static void AnalogSetDefault(void);
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 12  

 587          static void AnalogSetDefault(void)
 588          {
 589   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 590   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 591   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 592   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 593   1      }
 594          
 595          
 596          /*******************************************************************************
 597          * Function Name: SetAnalogRoutingPumps
 598          ********************************************************************************
 599          *
 600          * Summary:
 601          * Enables or disables the analog pumps feeding analog routing switches.
 602          * Intended to be called at startup, based on the Vdda system configuration;
 603          * may be called during operation when the user informs us that the Vdda voltage
 604          * crossed the pump threshold.
 605          *
 606          * Parameters:
 607          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 608          *
 609          * Return:
 610          *  void
 611          *
 612          *******************************************************************************/
 613          void SetAnalogRoutingPumps(uint8 enabled)
 614          {
 615   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 616   1              if (enabled != 0u)
 617   1              {
 618   2                      regValue |= 0x00u;
 619   2              }
 620   1              else
 621   1              {
 622   2                      regValue &= (uint8)~0x00u;
 623   2              }
 624   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 625   1      }
 626          
 627          
 628          
 629          
 630          /*******************************************************************************
 631          * Function Name: cyfitter_cfg
 632          ********************************************************************************
 633          * Summary:
 634          *  This function is called by the start-up code for the selected device. It
 635          *  performs all of the necessary device configuration based on the design
 636          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 637          *  as Clocks and Pins as well as any component configuration that is necessary.
 638          *
 639          * Parameters:
 640          *   void
 641          *
 642          * Return:
 643          *   void
 644          *
 645          *******************************************************************************/
 646          
 647          void cyfitter_cfg(void)
 648          {
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 13  

 649   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 650   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x01u));
 651   1      
 652   1              {
 653   2                      cfg_dma_init();
 654   2      
 655   2                      /* Enable digital routing */
 656   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 657   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 658   2      
 659   2                      /* Enable UDB array */
 660   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 661   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 662   2              }
 663   1      
 664   1      
 665   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 666   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (const void CYFAR *)(BS_IOPINS0_0_VAL), 8u);
 667   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT12_DM0), (const void CYFAR *)(BS_IOPINS0_7_VAL), 8u);
 668   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT15_DM0), (const void CYFAR *)(BS_IOPINS0_8_VAL), 8u);
 669   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DR), (const void CYFAR *)(BS_IOPINS0_1_VAL), 10u);
 670   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 671   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 672   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 673   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 674   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 675   1              {
 676   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 677   2              }
 678   1      
 679   1      
 680   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 681   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 682   1              /* Setup clocks based on selections from Clock DWR */
 683   1              ClockSetup();
 684   1      
 685   1              /* Perform basic analog initialization to defaults */
 686   1              AnalogSetDefault();
 687   1      
 688   1              /* Configure alternate active mode */
 689   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 690   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 691   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 80
0000         ?C0001:
                                           ; SOURCE LINE # 98
0000 80FE              SJMP    ?C0001
0002 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 468
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 FE                MOV     R6,A
0003 FD                MOV     R5,A
0004 FC                MOV     R4,A
0005 900000      R     MOV     DPTR,#DMA_ZERO_VAL
0008 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 469
000B 907600            MOV     DPTR,#07600H
000E 7410              MOV     A,#010H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
0011 907010            MOV     DPTR,#07010H
0014 7401              MOV     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
0017 907019            MOV     DPTR,#07019H
001A E4                CLR     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
001C 7B02              MOV     R3,#02H
001E 7A78              MOV     R2,#078H
0020 F9                MOV     R1,A
0021 7DA8              MOV     R5,#0A8H
0023 7C02              MOV     R4,#02H
0025 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 473
0028 907802            MOV     DPTR,#07802H
002B 7401              MOV     A,#01H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
002E A3                INC     DPTR
002F 74A3              MOV     A,#0A3H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
0032 7B02              MOV     R3,#02H
0034 7A78              MOV     R2,#078H
0036 7904              MOV     R1,#04H
0038 C003              PUSH    AR3
003A C002              PUSH    AR2
003C C001              PUSH    AR1
003E 7BFF              MOV     R3,#0FFH
0040 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0042 7900        R     MOV     R1,#LOW CFG_TD_LIST0
0044 E9                MOV     A,R1
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 15  

0045 EA                MOV     A,R2
0046 E4                CLR     A
0047 AD01              MOV     R5,AR1
0049 AC02              MOV     R4,AR2
004B D001              POP     AR1
004D D002              POP     AR2
004F D003              POP     AR3
0051 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 476
0054 7B02              MOV     R3,#02H
0056 7A78              MOV     R2,#078H
0058 7906              MOV     R1,#06H
005A 7D08              MOV     R5,#08H
005C 7C78              MOV     R4,#078H
005E 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 477
0061 7B02              MOV     R3,#02H
0063 7A76              MOV     R2,#076H
0065 7904              MOV     R1,#04H
0067 7D10              MOV     R5,#010H
0069 7C00              MOV     R4,#00H
006B 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 478
006E 7B02              MOV     R3,#02H
0070 7A76              MOV     R2,#076H
0072 7906              MOV     R1,#06H
0074 E4                CLR     A
0075 FD                MOV     R5,A
0076 FC                MOV     R4,A
0077 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 479
007A 907029            MOV     DPTR,#07029H
007D 740B              MOV     A,#0BH
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 480
0080 907039            MOV     DPTR,#07039H
0083 04                INC     A
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
0085 907059            MOV     DPTR,#07059H
0088 7415              MOV     A,#015H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
008B 907069            MOV     DPTR,#07069H
008E 7417              MOV     A,#017H
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
0091 907079            MOV     DPTR,#07079H
0094 741E              MOV     A,#01EH
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
0097 907014            MOV     DPTR,#07014H
009A 7401              MOV     A,#01H
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
009D         ?C0010:
                                           ; SOURCE LINE # 490
009D 907018            MOV     DPTR,#07018H
00A0 E0                MOVX    A,@DPTR
00A1 5401              ANL     A,#01H
00A3 70F8              JNZ     ?C0010
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 16  

00A5         ?C0011:
00A5         ?C0012:
                                           ; SOURCE LINE # 491
00A5 907028            MOV     DPTR,#07028H
00A8 E0                MOVX    A,@DPTR
00A9 5401              ANL     A,#01H
00AB 70F8              JNZ     ?C0012
00AD         ?C0013:
00AD         ?C0014:
                                           ; SOURCE LINE # 492
00AD 907038            MOV     DPTR,#07038H
00B0 E0                MOVX    A,@DPTR
00B1 5401              ANL     A,#01H
00B3 70F8              JNZ     ?C0014
00B5         ?C0015:
00B5         ?C0016:
                                           ; SOURCE LINE # 493
00B5 907058            MOV     DPTR,#07058H
00B8 E0                MOVX    A,@DPTR
00B9 5401              ANL     A,#01H
00BB 70F8              JNZ     ?C0016
00BD         ?C0017:
00BD         ?C0018:
                                           ; SOURCE LINE # 494
00BD 907068            MOV     DPTR,#07068H
00C0 E0                MOVX    A,@DPTR
00C1 5401              ANL     A,#01H
00C3 70F8              JNZ     ?C0018
00C5         ?C0019:
00C5         ?C0020:
                                           ; SOURCE LINE # 495
00C5 907078            MOV     DPTR,#07078H
00C8 E0                MOVX    A,@DPTR
00C9 5401              ANL     A,#01H
00CB 70F8              JNZ     ?C0020
00CD         ?C0021:
                                           ; SOURCE LINE # 498
00CD         ?C0022:
00CD 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 523
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D02              MOV     R5,#02H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 524
000D 904082            MOV     DPTR,#04082H
0010 7418              MOV     A,#018H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
0013 7B00              MOV     R3,#00H
0015 7A40              MOV     R2,#040H
0017 7984              MOV     R1,#084H
0019 7D17              MOV     R5,#017H
001B 7C00              MOV     R4,#00H
001D 120000      E     LCALL   _cywrite16
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 17  

                                           ; SOURCE LINE # 526
0020 904086            MOV     DPTR,#04086H
0023 7418              MOV     A,#018H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 527
0026 7B00              MOV     R3,#00H
0028 7A40              MOV     R2,#040H
002A 7988              MOV     R1,#088H
002C 7D2F              MOV     R5,#02FH
002E 7C00              MOV     R4,#00H
0030 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 528
0033 90408A            MOV     DPTR,#0408AH
0036 7418              MOV     A,#018H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 531
0039 904300            MOV     DPTR,#04300H
003C 7406              MOV     A,#06H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 534
003F 904200            MOV     DPTR,#04200H
0042 7452              MOV     A,#052H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 535
0045 7B0C              MOV     R3,#0CH
0047 7A01              MOV     R2,#01H
0049 790F              MOV     R1,#0FH
004B 120000      E     LCALL   _cyread8
004E 9046A1            MOV     DPTR,#046A1H
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 538
0053 7B00              MOV     R3,#00H
0055 7A42              MOV     R2,#042H
0057 7922              MOV     R1,#022H
0059 7D10              MOV     R5,#010H
005B 7C07              MOV     R4,#07H
005D 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 539
0060 7B00              MOV     R3,#00H
0062 7A42              MOV     R2,#042H
0064 7920              MOV     R1,#020H
0066 7D51              MOV     R5,#051H
0068 7C12              MOV     R4,#012H
006A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 541
006D E4                CLR     A
006E 900000      R     MOV     DPTR,#pllLock
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 542
0072 7F19              MOV     R7,#019H
0074 FE                MOV     R6,A
0075 FD                MOV     R5,A
0076 FC                MOV     R4,A
0077 900000      R     MOV     DPTR,#timeout
007A 120000      E     LCALL   ?C?LSTXDATA
007D         ?C0023:
007D 900000      R     MOV     DPTR,#timeout
0080 E0                MOVX    A,@DPTR
0081 A3                INC     DPTR
0082 E0                MOVX    A,@DPTR
0083 A3                INC     DPTR
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 18  

0084 E0                MOVX    A,@DPTR
0085 FE                MOV     R6,A
0086 A3                INC     DPTR
0087 E0                MOVX    A,@DPTR
0088 D3                SETB    C
0089 9400              SUBB    A,#00H
008B EE                MOV     A,R6
008C 9400              SUBB    A,#00H
008E 404A              JC      ?C0024
0090 A3                INC     DPTR
0091 E0                MOVX    A,@DPTR
0092 FF                MOV     R7,A
0093 6403              XRL     A,#03H
0095 6043              JZ      ?C0024
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
0097 904225            MOV     DPTR,#04225H
009A E0                MOVX    A,@DPTR
009B 5401              ANL     A,#01H
009D FE                MOV     R6,A
009E EF                MOV     A,R7
009F 25E0              ADD     A,ACC
00A1 4E                ORL     A,R6
00A2 5403              ANL     A,#03H
00A4 900000      R     MOV     DPTR,#pllLock
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 545
00A8 E4                CLR     A
00A9 7FE0              MOV     R7,#0E0H
00AB 7E01              MOV     R6,#01H
00AD FD                MOV     R5,A
00AE FC                MOV     R4,A
00AF 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 546
00B2 900000      R     MOV     DPTR,#timeout
00B5 E0                MOVX    A,@DPTR
00B6 FC                MOV     R4,A
00B7 A3                INC     DPTR
00B8 E0                MOVX    A,@DPTR
00B9 FD                MOV     R5,A
00BA A3                INC     DPTR
00BB E0                MOVX    A,@DPTR
00BC FE                MOV     R6,A
00BD A3                INC     DPTR
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 74FF              MOV     A,#0FFH
00C2 EF                MOV     A,R7
00C3 24FF              ADD     A,#0FFH
00C5 FF                MOV     R7,A
00C6 EE                MOV     A,R6
00C7 34FF              ADDC    A,#0FFH
00C9 FE                MOV     R6,A
00CA ED                MOV     A,R5
00CB 34FF              ADDC    A,#0FFH
00CD FD                MOV     R5,A
00CE EC                MOV     A,R4
00CF 34FF              ADDC    A,#0FFH
00D1 FC                MOV     R4,A
00D2 900000      R     MOV     DPTR,#timeout
00D5 120000      E     LCALL   ?C?LSTXDATA
00D8 80A3              SJMP    ?C0023
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 19  

00DA         ?C0024:
                                           ; SOURCE LINE # 548
00DA 900000      R     MOV     DPTR,#timeout
00DD E0                MOVX    A,@DPTR
00DE A3                INC     DPTR
00DF E0                MOVX    A,@DPTR
00E0 A3                INC     DPTR
00E1 E0                MOVX    A,@DPTR
00E2 FE                MOV     R6,A
00E3 A3                INC     DPTR
00E4 E0                MOVX    A,@DPTR
00E5 4E                ORL     A,R6
00E6 7005              JNZ     ?C0026
                                           ; SOURCE LINE # 549
                                           ; SOURCE LINE # 550
00E8 7F03              MOV     R7,#03H
00EA 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 551
00ED         ?C0026:
                                           ; SOURCE LINE # 554
00ED 7B00              MOV     R3,#00H
00EF 7A40              MOV     R2,#040H
00F1 7904              MOV     R1,#04H
00F3 7D00              MOV     R5,#00H
00F5 7C01              MOV     R4,#01H
00F7 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 555
00FA 904004            MOV     DPTR,#04004H
00FD 7407              MOV     A,#07H
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 556
0100 904006            MOV     DPTR,#04006H
0103 E4                CLR     A
0104 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 557
0105 904008            MOV     DPTR,#04008H
0108 7448              MOV     A,#048H
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 558
010B 904004            MOV     DPTR,#04004H
010E E4                CLR     A
010F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
0110 904009            MOV     DPTR,#04009H
0113 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
0114 904001            MOV     DPTR,#04001H
0117 7402              MOV     A,#02H
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
011A 9043A2            MOV     DPTR,#043A2H
011D E0                MOVX    A,@DPTR
011E 4407              ORL     A,#07H
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
0121 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 588
                                           ; SOURCE LINE # 589
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 20  

0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
;---- Variable 'bg_xover_inl_trim' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 590
0009 EF                MOV     A,R7
000A 5407              ANL     A,#07H
000C 90586E            MOV     DPTR,#0586EH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 591
0010 EF                MOV     A,R7
0011 C4                SWAP    A
0012 540F              ANL     A,#0FH
0014 A3                INC     DPTR
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
0016 905876            MOV     DPTR,#05876H
0019 7444              MOV     A,#044H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 593
001C 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 613
;---- Variable 'enabled' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 615
0000 905876            MOV     DPTR,#05876H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
;---- Variable 'regValue' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 616
0005 EF                MOV     A,R7
0006 6003              JZ      ?C0029
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
0008 EE                MOV     A,R6
                                           ; SOURCE LINE # 619
0009 8001              SJMP    ?C0030
000B         ?C0029:
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
000B EE                MOV     A,R6
                                           ; SOURCE LINE # 623
000C         ?C0030:
                                           ; SOURCE LINE # 624
000C AF06              MOV     R7,AR6
000E 905876            MOV     DPTR,#05876H
0011 EE                MOV     A,R6
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 625
0013 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 647
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 650
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 21  

0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4401              ORL     A,#01H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
0016 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 656
0019 7B01              MOV     R3,#01H
001B 7A50              MOV     R2,#050H
001D 7903              MOV     R1,#03H
001F 120000      E     LCALL   _cyread8
0022 EF                MOV     A,R7
0023 4402              ORL     A,#02H
0025 FD                MOV     R5,A
0026 7B01              MOV     R3,#01H
0028 7A50              MOV     R2,#050H
002A 7903              MOV     R1,#03H
002C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 657
002F 7B01              MOV     R3,#01H
0031 7A50              MOV     R2,#050H
0033 7913              MOV     R1,#013H
0035 120000      E     LCALL   _cyread8
0038 EF                MOV     A,R7
0039 4402              ORL     A,#02H
003B FD                MOV     R5,A
003C 7B01              MOV     R3,#01H
003E 7A50              MOV     R2,#050H
0040 7913              MOV     R1,#013H
0042 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 660
0045 9043A0            MOV     DPTR,#043A0H
0048 E0                MOVX    A,@DPTR
0049 4440              ORL     A,#040H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 661
004C 9043C2            MOV     DPTR,#043C2H
004F E0                MOVX    A,@DPTR
0050 4410              ORL     A,#010H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 666
0053 7B08              MOV     R3,#08H
0055 7A1F              MOV     R2,#01FH
0057 79BC              MOV     R1,#0BCH
0059 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
005C E4                CLR     A
005D F0                MOVX    @DPTR,A
005E A3                INC     DPTR
005F 7451              MOV     A,#051H
0061 F0                MOVX    @DPTR,A
0062 A3                INC     DPTR
0063 7402              MOV     A,#02H
0065 F0                MOVX    @DPTR,A
0066 7F08              MOV     R7,#08H
0068 7E00              MOV     R6,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 22  

006A 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 667
006D 7B08              MOV     R3,#08H
006F 7A1F              MOV     R2,#01FH
0071 79C4              MOV     R1,#0C4H
0073 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0076 E4                CLR     A
0077 F0                MOVX    @DPTR,A
0078 A3                INC     DPTR
0079 7451              MOV     A,#051H
007B F0                MOVX    @DPTR,A
007C A3                INC     DPTR
007D 74C2              MOV     A,#0C2H
007F F0                MOVX    @DPTR,A
0080 7F08              MOV     R7,#08H
0082 7E00              MOV     R6,#00H
0084 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 668
0087 7B08              MOV     R3,#08H
0089 7A1F              MOV     R2,#01FH
008B 79CC              MOV     R1,#0CCH
008D 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0090 E4                CLR     A
0091 F0                MOVX    @DPTR,A
0092 A3                INC     DPTR
0093 7451              MOV     A,#051H
0095 F0                MOVX    @DPTR,A
0096 A3                INC     DPTR
0097 74F2              MOV     A,#0F2H
0099 F0                MOVX    @DPTR,A
009A 7F08              MOV     R7,#08H
009C 7E00              MOV     R6,#00H
009E 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 669
00A1 7B08              MOV     R3,#08H
00A3 7A1F              MOV     R2,#01FH
00A5 79D4              MOV     R1,#0D4H
00A7 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00AA E4                CLR     A
00AB F0                MOVX    @DPTR,A
00AC A3                INC     DPTR
00AD 7451              MOV     A,#051H
00AF F0                MOVX    @DPTR,A
00B0 A3                INC     DPTR
00B1 7410              MOV     A,#010H
00B3 F0                MOVX    @DPTR,A
00B4 7F0A              MOV     R7,#0AH
00B6 7E00              MOV     R6,#00H
00B8 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 670
00BB 7B08              MOV     R3,#08H
00BD 7A1F              MOV     R2,#01FH
00BF 79E0              MOV     R1,#0E0H
00C1 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00C4 E4                CLR     A
00C5 F0                MOVX    @DPTR,A
00C6 A3                INC     DPTR
00C7 7451              MOV     A,#051H
00C9 F0                MOVX    @DPTR,A
00CA A3                INC     DPTR
00CB 7422              MOV     A,#022H
00CD F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 23  

00CE 7F08              MOV     R7,#08H
00D0 7E00              MOV     R6,#00H
00D2 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 671
00D5 9044F4            MOV     DPTR,#044F4H
00D8 7401              MOV     A,#01H
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 673
00DB 904322            MOV     DPTR,#04322H
00DE E0                MOVX    A,@DPTR
00DF 4408              ORL     A,#08H
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 674
00E2 9046EC            MOV     DPTR,#046ECH
00E5 E0                MOVX    A,@DPTR
00E6 C3                CLR     C
00E7 9405              SUBB    A,#05H
00E9 5006              JNC     ?C0032
                                           ; SOURCE LINE # 675
                                           ; SOURCE LINE # 676
00EB 904689            MOV     DPTR,#04689H
00EE 743A              MOV     A,#03AH
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 677
00F1         ?C0032:
                                           ; SOURCE LINE # 681
00F1 904800            MOV     DPTR,#04800H
00F4 74F1              MOV     A,#0F1H
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 683
00F7 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 686
00FA 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 689
00FD 7B00              MOV     R3,#00H
00FF 7A43              MOV     R2,#043H
0101 79A0              MOV     R1,#0A0H
0103 C003              PUSH    AR3
0105 C002              PUSH    AR2
0107 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
010A EB                MOV     A,R3
010B F0                MOVX    @DPTR,A
010C A3                INC     DPTR
010D EA                MOV     A,R2
010E F0                MOVX    @DPTR,A
010F A3                INC     DPTR
0110 74B0              MOV     A,#0B0H
0112 F0                MOVX    @DPTR,A
0113 D002              POP     AR2
0115 D003              POP     AR3
0117 7F0E              MOV     R7,#0EH
0119 7E00              MOV     R6,#00H
011B 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 690
011E 9043B0            MOV     DPTR,#043B0H
0121 E0                MOVX    A,@DPTR
0122 54FD              ANL     A,#0FDH
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 691
0125 22                RET     
             ; FUNCTION cyfitter_cfg (END)

C51 COMPILER V9.51   CYFITTER_CFG                                                          04/12/2018 12:03:45 PAGE 24  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    842    ----
   CONSTANT SIZE    =    981    ----
   XDATA SIZE       =      4       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
