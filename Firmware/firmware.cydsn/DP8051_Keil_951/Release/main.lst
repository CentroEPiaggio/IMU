C51 COMPILER V9.51   MAIN                                                                  04/12/2018 12:29:00 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(2) PR(.\DP8051_Keil_951
                    -\Release/main.lst) CD OT(11,SPEED) OJ(.\DP8051_Keil_951\Release\main.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          // ----------------------------------------------------------------------------
   2          // BSD 3-Clause License
   3          
   4          // Copyright (c) 2016, qbrobotics
   5          // Copyright (c) 2017-2018, Centro "E.Piaggio"
   6          // All rights reserved.
   7          
   8          // Redistribution and use in source and binary forms, with or without
   9          // modification, are permitted provided that the following conditions are met:
  10          
  11          // * Redistributions of source code must retain the above copyright notice, this
  12          //   list of conditions and the following disclaimer.
  13          
  14          // * Redistributions in binary form must reproduce the above copyright notice,
  15          //   this list of conditions and the following disclaimer in the documentation
  16          //   and/or other materials provided with the distribution.
  17          
  18          // * Neither the name of the copyright holder nor the names of its
  19          //   contributors may be used to endorse or promote products derived from
  20          //   this software without specific prior written permission.
  21          
  22          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25          // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26          // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27          // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28          // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29          // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30          // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32          // POSSIBILITY OF SUCH DAMAGE.
  33          // ----------------------------------------------------------------------------
  34          
  35          /**
  36          * \file         main.c
  37          *
  38          * \brief        Firmware main file.
  39          * \date         February 01, 2018
  40          * \author       _Centro "E.Piaggio"_
  41          * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42          * \copyright    (C) 2017-2018 Centro "E.Piaggio". All rights reserved.
  43          * \mainpage     Firmware
  44          * \brief        This is the firmware of the IMU board.
  45          * \version      1.0
  46          *
  47          * \details      This is the firmware of the IMU board. It can read up to 17 IMU modules
  48          *               connected to the PSoC microcontroller.                
  49          *
  50          */
  51          
  52          
C51 COMPILER V9.51   MAIN                                                                  04/12/2018 12:29:00 PAGE 2   

  53          // ----------------------------------------------------------------------------
  54          // This version changes:
  55          //      - not reported
  56          
  57          
  58          //=================================================================     includes
  59          
  60          #include <device.h>
  61          #include <globals.h> // ALL GLOBAL DEFINITIONS, STRUCTURES AND MACROS HERE
  62          #include <interruptions.h>
  63          #include <command_processing.h>
  64          #include <utils.h>
  65          #include <IMU_functions.h>
  66          
  67          //==============================================================================
  68          //                                                                 MAIN FUNCTION
  69          //==============================================================================
  70          
  71          int main()
  72          { 
  73   1          //================================     initializations - psoc and components
  74   1      
  75   1          // EEPROM
  76   1      
  77   1          EEPROM_Start();
  78   1          memRecall();                                        // recall configuration
  79   1      
  80   1          // FTDI chip enable
  81   1      
  82   1          CyDelay(100);
  83   1          FTDI_ENABLE_REG_Write(0x01);
  84   1          
  85   1          // RS485
  86   1      
  87   1          UART_RS485_Stop();                                  // stop UART
  88   1          UART_RS485_Start();                                 // start UART
  89   1          UART_RS485_Init();
  90   1      
  91   1          UART_RS485_ClearRxBuffer();
  92   1          UART_RS485_ClearTxBuffer();
  93   1      
  94   1          ISR_RS485_RX_StartEx(ISR_RS485_RX_ExInterrupt);     // RS485 isr function
  95   1           
  96   1          RS485_CTS_Write(0);                                 // Clear To Send on RS485
  97   1      
  98   1          // TIMER
  99   1      
 100   1          MY_TIMER_Start();           
 101   1          PACER_TIMER_Start();
 102   1      
 103   1          CYGlobalIntEnable;                                  // enable interrupts
 104   1          
 105   1          //SPI module
 106   1              SPI_IMU_Start();
 107   1              SPI_IMU_Init();
 108   1              SPI_IMU_Enable();
 109   1              SPI_IMU_ClearRxBuffer();
 110   1              SPI_IMU_ClearTxBuffer();
 111   1              SPI_IMU_ClearFIFO();                                                    
 112   1          CyDelay(10);
 113   1          
 114   1          Opto_Pin_Write(1); //start hw spi communication
C51 COMPILER V9.51   MAIN                                                                  04/12/2018 12:29:00 PAGE 3   

 115   1          
 116   1          // Init MPU9250 devices
 117   1          InitIMUgeneral();
 118   1      
 119   1      
 120   1      //========================================     initializations - clean variables
 121   1         
 122   1          //------------------------------------------------- Initialize package on receive from RS485
 123   1          g_rx.length = 0;
 124   1          g_rx.ready  = 0;
 125   1      
 126   1          //============================================================     main loop
 127   1      
 128   1          for(;;)
 129   1          {
 130   2              // Put the FF reset pin to LOW
 131   2              RESET_FF_Write(0x00);
 132   2      
 133   2              // Call function scheduler
 134   2              function_scheduler();
 135   2      
 136   2              //  Wait until the FF is set to 1
 137   2              while(FF_STATUS_Read() == 0){
 138   3                  // On interrupt from RS485
 139   3                  if (interrupt_flag){
 140   4                      // Reset flags
 141   4                      interrupt_flag = FALSE;
 142   4      
 143   4                      // Manage Interrupt on rs485
 144   4                      interrupt_manager();
 145   4                  }
 146   3              };
 147   2      
 148   2              // Command a FF reset
 149   2              RESET_FF_Write(0x01);
 150   2      
 151   2              // Wait for FF to be reset
 152   2              while(FF_STATUS_Read() == 1);
 153   2      
 154   2              if(UART_RS485_ReadRxStatus() & UART_RS485_RX_STS_SOFT_BUFF_OVER)
 155   2                  UART_RS485_ClearRxBuffer();
 156   2          }
 157   1          return 0;
 158   1      }
 159          
 160          
 161          
 162          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  04/12/2018 12:29:00 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 77
0000 120000      E     LCALL   EEPROM_Start
                                           ; SOURCE LINE # 78
0003 120000      E     LCALL   memRecall
                                           ; SOURCE LINE # 82
0006 E4                CLR     A
0007 7F64              MOV     R7,#064H
0009 FE                MOV     R6,A
000A FD                MOV     R5,A
000B FC                MOV     R4,A
000C 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 83
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _FTDI_ENABLE_REG_Write
                                           ; SOURCE LINE # 87
0014 120000      E     LCALL   UART_RS485_Stop
                                           ; SOURCE LINE # 88
0017 120000      E     LCALL   UART_RS485_Start
                                           ; SOURCE LINE # 89
001A 120000      E     LCALL   UART_RS485_Init
                                           ; SOURCE LINE # 91
001D 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 92
0020 120000      E     LCALL   UART_RS485_ClearTxBuffer
                                           ; SOURCE LINE # 94
0023 7E00        E     MOV     R6,#HIGH ISR_RS485_RX_ExInterrupt
0025 7F00        E     MOV     R7,#LOW ISR_RS485_RX_ExInterrupt
0027 120000      E     LCALL   _ISR_RS485_RX_StartEx
                                           ; SOURCE LINE # 96
002A E4                CLR     A
002B FF                MOV     R7,A
002C 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 100
002F 120000      E     LCALL   MY_TIMER_Start
                                           ; SOURCE LINE # 101
0032 120000      E     LCALL   PACER_TIMER_Start
                                           ; SOURCE LINE # 103
0035 D2AF              SETB    EA
0037 9044F4            MOV     DPTR,#044F4H
003A 74FD              MOV     A,#0FDH
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
003D 120000      E     LCALL   SPI_IMU_Start
                                           ; SOURCE LINE # 107
0040 120000      E     LCALL   SPI_IMU_Init
                                           ; SOURCE LINE # 108
0043 120000      E     LCALL   SPI_IMU_Enable
                                           ; SOURCE LINE # 109
0046 120000      E     LCALL   SPI_IMU_ClearRxBuffer
                                           ; SOURCE LINE # 110
0049 120000      E     LCALL   SPI_IMU_ClearTxBuffer
                                           ; SOURCE LINE # 111
004C 120000      E     LCALL   SPI_IMU_ClearFIFO
                                           ; SOURCE LINE # 112
004F E4                CLR     A
0050 7F0A              MOV     R7,#0AH
C51 COMPILER V9.51   MAIN                                                                  04/12/2018 12:29:00 PAGE 5   

0052 FE                MOV     R6,A
0053 FD                MOV     R5,A
0054 FC                MOV     R4,A
0055 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 114
0058 7F01              MOV     R7,#01H
005A 120000      E     LCALL   _Opto_Pin_Write
                                           ; SOURCE LINE # 117
005D 120000      E     LCALL   InitIMUgeneral
                                           ; SOURCE LINE # 123
0060 E4                CLR     A
0061 900000      E     MOV     DPTR,#g_rx+080H
0064 F0                MOVX    @DPTR,A
0065 A3                INC     DPTR
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
0067 900000      E     MOV     DPTR,#g_rx+084H
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
006B         ?C0001:
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 131
006B E4                CLR     A
006C FF                MOV     R7,A
006D 120000      E     LCALL   _RESET_FF_Write
                                           ; SOURCE LINE # 134
0070 120000      E     LCALL   function_scheduler
0073         ?C0003:
                                           ; SOURCE LINE # 137
0073 120000      E     LCALL   FF_STATUS_Read
0076 EF                MOV     A,R7
0077 700A              JNZ     ?C0004
                                           ; SOURCE LINE # 139
0079 3000F7            JNB     interrupt_flag,?C0003
                                           ; SOURCE LINE # 141
007C C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 144
007E 120000      E     LCALL   interrupt_manager
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
0081 80F0              SJMP    ?C0003
0083         ?C0004:
                                           ; SOURCE LINE # 149
0083 7F01              MOV     R7,#01H
0085 120000      E     LCALL   _RESET_FF_Write
0088         ?C0006:
                                           ; SOURCE LINE # 152
0088 120000      E     LCALL   FF_STATUS_Read
008B EF                MOV     A,R7
008C 6401              XRL     A,#01H
008E 60F8              JZ      ?C0006
0090         ?C0007:
                                           ; SOURCE LINE # 154
0090 120000      E     LCALL   UART_RS485_ReadRxStatus
0093 EF                MOV     A,R7
0094 30E7D4            JNB     ACC.7,?C0001
                                           ; SOURCE LINE # 155
0097 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 156
009A 80CF              SJMP    ?C0001
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
C51 COMPILER V9.51   MAIN                                                                  04/12/2018 12:29:00 PAGE 6   

009C         ?C0009:
009C 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    157    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
