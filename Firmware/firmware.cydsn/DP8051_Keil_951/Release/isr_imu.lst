C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE ISR_IMU
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\isr_imu.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\isr_imu.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) 
                    -WL(2) PR(.\DP8051_Keil_951\Release/isr_imu.lst) CD OT(11,SPEED) OJ(.\DP8051_Keil_951\Release\isr_imu.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: isr_imu.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          
  19          #include <cydevice_trm.h>
  20          #include <CyLib.h>
  21          #include <isr_imu.h>
  22          
  23          
  24          #if !defined(isr_imu__REMOVED) /* Check for removal by optimization */
  25          
  26          /*******************************************************************************
  27          *  Place your includes, defines and code here 
  28          ********************************************************************************/
  29          /* `#START isr_imu_intc` */
  30          #include <IMU_functions.h>
  31          #include <command_processing.h>
  32          
  33          extern uint8 N_IMU_Connected;
  34          extern uint8 IMU_connected[N_IMU_MAX];
  35          extern uint8 IMU_conf[N_IMU_MAX][5];
  36          extern uint8 imu_send_flag;
  37          extern int imus_data_size;
  38          extern int single_imu_size[N_IMU_MAX];
  39          
  40          extern uint8 Accel[N_IMU_MAX][6];
  41          extern uint8 Gyro[N_IMU_MAX][6];
  42          extern uint8 Mag[N_IMU_MAX][6];   
  43          extern struct st_imu g_imu[N_IMU_MAX];
  44          
  45          extern float scaleAccFactor; 
  46          extern float scaleGyroFactor;
  47          extern float scaleMagFactor;
  48          /* `#END` */
  49          
  50          
  51          /*******************************************************************************
  52          * Function Name: isr_imu_Start
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 2   

  53          ********************************************************************************
  54          *
  55          * Summary:
  56          *  Set up the interrupt and enable it. This function disables the interrupt, 
  57          *  sets the default interrupt vector, sets the priority from the value in the
  58          *  Design Wide Resources Interrupt Editor, then enables the interrupt to the 
  59          *  interrupt controller.
  60          *
  61          * Parameters:  
  62          *   None
  63          *
  64          * Return:
  65          *   None
  66          *
  67          *******************************************************************************/
  68          void isr_imu_Start(void) 
  69          {
  70   1          /* For all we know the interrupt is active. */
  71   1          isr_imu_Disable();
  72   1      
  73   1          /* Set the ISR to point to the isr_imu Interrupt. */
  74   1          isr_imu_SetVector(&isr_imu_Interrupt);
  75   1      
  76   1          /* Set the priority. */
  77   1          isr_imu_SetPriority((uint8)isr_imu_INTC_PRIOR_NUMBER);
  78   1      
  79   1          /* Enable it. */
  80   1          isr_imu_Enable();
  81   1      }
  82          
  83          
  84          /*******************************************************************************
  85          * Function Name: isr_imu_StartEx
  86          ********************************************************************************
  87          *
  88          * Summary:
  89          *  Sets up the interrupt and enables it. This function disables the interrupt,
  90          *  sets the interrupt vector based on the address passed in, sets the priority 
  91          *  from the value in the Design Wide Resources Interrupt Editor, then enables 
  92          *  the interrupt to the interrupt controller.
  93          *  
  94          *  When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
  95          *  used to provide consistent definition across compilers:
  96          *  
  97          *  Function definition example:
  98          *   CY_ISR(MyISR)
  99          *   {
 100          *   }
 101          *   Function prototype example:
 102          *   CY_ISR_PROTO(MyISR);
 103          *
 104          * Parameters:  
 105          *   address: Address of the ISR to set in the interrupt vector table.
 106          *
 107          * Return:
 108          *   None
 109          *
 110          *******************************************************************************/
 111          void isr_imu_StartEx(cyisraddress address) 
 112          {
 113   1          /* For all we know the interrupt is active. */
 114   1          isr_imu_Disable();
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 3   

 115   1      
 116   1          /* Set the ISR to point to the isr_imu Interrupt. */
 117   1          isr_imu_SetVector(address);
 118   1      
 119   1          /* Set the priority. */
 120   1          isr_imu_SetPriority((uint8)isr_imu_INTC_PRIOR_NUMBER);
 121   1      
 122   1          /* Enable it. */
 123   1          isr_imu_Enable();
 124   1      }
 125          
 126          
 127          /*******************************************************************************
 128          * Function Name: isr_imu_Stop
 129          ********************************************************************************
 130          *
 131          * Summary:
 132          *   Disables and removes the interrupt.
 133          *
 134          * Parameters:  
 135          *   None
 136          *
 137          * Return:
 138          *   None
 139          *
 140          *******************************************************************************/
 141          void isr_imu_Stop(void) 
 142          {
 143   1          /* Disable this interrupt. */
 144   1          isr_imu_Disable();
 145   1      }
 146          
 147          
 148          /*******************************************************************************
 149          * Function Name: isr_imu_Interrupt
 150          ********************************************************************************
 151          *
 152          * Summary:
 153          *   The default Interrupt Service Routine for isr_imu.
 154          *
 155          *   Add custom code between the START and END comments to keep the next version
 156          *   of this file from over-writing your code.
 157          *
 158          *   Note You may use either the default ISR by using this API, or you may define
 159          *   your own separate ISR through ISR_StartEx().
 160          *
 161          * Parameters:  
 162          *   None
 163          *
 164          * Return:
 165          *   None
 166          *
 167          *******************************************************************************/
 168          CY_ISR(isr_imu_Interrupt)
 169          {
 170   1          #ifdef isr_imu_INTERRUPT_INTERRUPT_CALLBACK
                      isr_imu_Interrupt_InterruptCallback();
                  #endif /* isr_imu_INTERRUPT_INTERRUPT_CALLBACK */
 173   1      
 174   1          /*  Place your Interrupt code here. */
 175   1          /* `#START isr_imu_Interrupt` */
 176   1          static uint8 k_imu = 0;
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 4   

 177   1          static struct st_imu g_imuTMP[N_IMU_MAX];
 178   1          uint16 tmp = 0;
 179   1      
 180   1          // Read k_imu IMU
 181   1          ChipSelector(IMU_connected[k_imu]);
 182   1          ReadIMU(IMU_connected[k_imu]);   
 183   1         
 184   1          tmp = Accel[IMU_connected[k_imu]][0];
 185   1          g_imuTMP[k_imu].accel_value[0] = (int16)(tmp<<8 | Accel[IMU_connected[k_imu]][1]);
 186   1          tmp = Accel[IMU_connected[k_imu]][2];
 187   1          g_imuTMP[k_imu].accel_value[1] = (int16)(tmp<<8 | Accel[IMU_connected[k_imu]][3]);
 188   1          tmp = Accel[IMU_connected[k_imu]][4];
 189   1          g_imuTMP[k_imu].accel_value[2] = (int16)(tmp<<8 | Accel[IMU_connected[k_imu]][5]);
 190   1          
 191   1          tmp = Gyro[IMU_connected[k_imu]][0];
 192   1          g_imuTMP[k_imu].gyro_value[0] = (int16)(tmp<<8 | Gyro[IMU_connected[k_imu]][1]);
 193   1          tmp = Gyro[IMU_connected[k_imu]][2];
 194   1          g_imuTMP[k_imu].gyro_value[1] = (int16)(tmp<<8 | Gyro[IMU_connected[k_imu]][3]);
 195   1          tmp = Gyro[IMU_connected[k_imu]][4];
 196   1          g_imuTMP[k_imu].gyro_value[2] = (int16)(tmp<<8 | Gyro[IMU_connected[k_imu]][5]);
 197   1          
 198   1          tmp = Mag[IMU_connected[k_imu]][0];
 199   1          g_imuTMP[k_imu].mag_value[0] = (int16)(tmp<<8 | Mag[IMU_connected[k_imu]][1]);
 200   1          tmp = Mag[IMU_connected[k_imu]][2];
 201   1          g_imuTMP[k_imu].mag_value[1] = (int16)(tmp<<8 | Mag[IMU_connected[k_imu]][3]);
 202   1          tmp = Mag[IMU_connected[k_imu]][4];
 203   1          g_imuTMP[k_imu].mag_value[2] = (int16)(tmp<<8 | Mag[IMU_connected[k_imu]][5]);
 204   1          
 205   1          k_imu = (k_imu+1)%N_IMU_Connected;
 206   1          
 207   1          // A whole reading has been done (7 bytes for each IMU)
 208   1          if (k_imu == 0){
 209   2              memcpy( &g_imuNew, &g_imuTMP, sizeof(g_imuTMP) );
 210   2          }
 211   1          
 212   1          /* `#END` */
 213   1      
 214   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 215   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 216   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (isr_imu__ES2_PATCH ))      
                          isr_imu_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 219   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 220   1      }
 221          
 222          
 223          /*******************************************************************************
 224          * Function Name: isr_imu_SetVector
 225          ********************************************************************************
 226          *
 227          * Summary:
 228          *   Change the ISR vector for the Interrupt. Note calling isr_imu_Start
 229          *   will override any effect this method would have had. To set the vector 
 230          *   before the component has been started use isr_imu_StartEx instead.
 231          * 
 232          *   When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
 233          *   used to provide consistent definition across compilers:
 234          *
 235          *   Function definition example:
 236          *   CY_ISR(MyISR)
 237          *   {
 238          *   }
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 5   

 239          *
 240          *   Function prototype example:
 241          *     CY_ISR_PROTO(MyISR);
 242          *
 243          * Parameters:
 244          *   address: Address of the ISR to set in the interrupt vector table.
 245          *
 246          * Return:
 247          *   None
 248          *
 249          *******************************************************************************/
 250          void isr_imu_SetVector(cyisraddress address) 
 251          {
 252   1          CY_SET_REG16(isr_imu_INTC_VECTOR, (uint16) address);
 253   1      }
 254          
 255          
 256          /*******************************************************************************
 257          * Function Name: isr_imu_GetVector
 258          ********************************************************************************
 259          *
 260          * Summary:
 261          *   Gets the "address" of the current ISR vector for the Interrupt.
 262          *
 263          * Parameters:
 264          *   None
 265          *
 266          * Return:
 267          *   Address of the ISR in the interrupt vector table.
 268          *
 269          *******************************************************************************/
 270          cyisraddress isr_imu_GetVector(void) 
 271          {
 272   1          return (cyisraddress) CY_GET_REG16(isr_imu_INTC_VECTOR);
 273   1      }
 274          
 275          
 276          /*******************************************************************************
 277          * Function Name: isr_imu_SetPriority
 278          ********************************************************************************
 279          *
 280          * Summary:
 281          *   Sets the Priority of the Interrupt. 
 282          *
 283          *   Note calling isr_imu_Start or isr_imu_StartEx will 
 284          *   override any effect this API would have had. This API should only be called
 285          *   after isr_imu_Start or isr_imu_StartEx has been called. 
 286          *   To set the initial priority for the component, use the Design-Wide Resources
 287          *   Interrupt Editor.
 288          *
 289          *   Note This API has no effect on Non-maskable interrupt NMI).
 290          *
 291          * Parameters:
 292          *   priority: Priority of the interrupt, 0 being the highest priority
 293          *             PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 294          *             PSoC 4: Priority is from 0 to 3.
 295          *
 296          * Return:
 297          *   None
 298          *
 299          *******************************************************************************/
 300          void isr_imu_SetPriority(uint8 priority) 
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 6   

 301          {
 302   1          *isr_imu_INTC_PRIOR = priority << 5;
 303   1      }
 304          
 305          
 306          /*******************************************************************************
 307          * Function Name: isr_imu_GetPriority
 308          ********************************************************************************
 309          *
 310          * Summary:
 311          *   Gets the Priority of the Interrupt.
 312          *
 313          * Parameters:
 314          *   None
 315          *
 316          * Return:
 317          *   Priority of the interrupt, 0 being the highest priority
 318          *    PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 319          *    PSoC 4: Priority is from 0 to 3.
 320          *
 321          *******************************************************************************/
 322          uint8 isr_imu_GetPriority(void) 
 323          {
 324   1          uint8 priority;
 325   1      
 326   1      
 327   1          priority = *isr_imu_INTC_PRIOR >> 5;
 328   1      
 329   1          return priority;
 330   1      }
 331          
 332          
 333          /*******************************************************************************
 334          * Function Name: isr_imu_Enable
 335          ********************************************************************************
 336          *
 337          * Summary:
 338          *   Enables the interrupt to the interrupt controller. Do not call this function
 339          *   unless ISR_Start() has been called or the functionality of the ISR_Start() 
 340          *   function, which sets the vector and the priority, has been called.
 341          *
 342          * Parameters:
 343          *   None
 344          *
 345          * Return:
 346          *   None
 347          *
 348          *******************************************************************************/
 349          void isr_imu_Enable(void) 
 350          {
 351   1          /* Enable the general interrupt. */
 352   1          *isr_imu_INTC_SET_EN = isr_imu__INTC_MASK;
 353   1      }
 354          
 355          
 356          /*******************************************************************************
 357          * Function Name: isr_imu_GetState
 358          ********************************************************************************
 359          *
 360          * Summary:
 361          *   Gets the state (enabled, disabled) of the Interrupt.
 362          *
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 7   

 363          * Parameters:
 364          *   None
 365          *
 366          * Return:
 367          *   1 if enabled, 0 if disabled.
 368          *
 369          *******************************************************************************/
 370          uint8 isr_imu_GetState(void) 
 371          {
 372   1          /* Get the state of the general interrupt. */
 373   1          return ((*isr_imu_INTC_SET_EN & (uint8)isr_imu__INTC_MASK) != 0u) ? 1u:0u;
 374   1      }
 375          
 376          
 377          /*******************************************************************************
 378          * Function Name: isr_imu_Disable
 379          ********************************************************************************
 380          *
 381          * Summary:
 382          *   Disables the Interrupt in the interrupt controller.
 383          *
 384          * Parameters:
 385          *   None
 386          *
 387          * Return:
 388          *   None
 389          *
 390          *******************************************************************************/
 391          void isr_imu_Disable(void) 
 392          {
 393   1          /* Disable the general interrupt. */
 394   1          *isr_imu_INTC_CLR_EN = isr_imu__INTC_MASK;
 395   1      }
 396          
 397          
 398          /*******************************************************************************
 399          * Function Name: isr_imu_SetPending
 400          ********************************************************************************
 401          *
 402          * Summary:
 403          *   Causes the Interrupt to enter the pending state, a software method of
 404          *   generating the interrupt.
 405          *
 406          * Parameters:
 407          *   None
 408          *
 409          * Return:
 410          *   None
 411          *
 412          * Side Effects:
 413          *   If interrupts are enabled and the interrupt is set up properly, the ISR is
 414          *   entered (depending on the priority of this interrupt and other pending 
 415          *   interrupts).
 416          *
 417          *******************************************************************************/
 418          void isr_imu_SetPending(void) 
 419          {
 420   1          *isr_imu_INTC_SET_PD = isr_imu__INTC_MASK;
 421   1      }
 422          
 423          
 424          /*******************************************************************************
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 8   

 425          * Function Name: isr_imu_ClearPending
 426          ********************************************************************************
 427          *
 428          * Summary:
 429          *   Clears a pending interrupt in the interrupt controller.
 430          *
 431          *   Note Some interrupt sources are clear-on-read and require the block 
 432          *   interrupt/status register to be read/cleared with the appropriate block API 
 433          *   (GPIO, UART, and so on). Otherwise the ISR will continue to remain in 
 434          *   pending state even though the interrupt itself is cleared using this API.
 435          *
 436          * Parameters:
 437          *   None
 438          *
 439          * Return:
 440          *   None
 441          *
 442          *******************************************************************************/
 443          void isr_imu_ClearPending(void) 
 444          {
 445   1          *isr_imu_INTC_CLR_PD = isr_imu__INTC_MASK;
 446   1      }
 447          
 448          #endif /* End check for removal by optimization */
 449          
 450          
 451          /* [] END OF FILE */
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION isr_imu_Start (BEGIN)
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 71
0000 120000      R     LCALL   isr_imu_Disable
                                           ; SOURCE LINE # 74
0003 7E00        R     MOV     R6,#HIGH isr_imu_Interrupt
0005 7F00        R     MOV     R7,#LOW isr_imu_Interrupt
0007 120000      R     LCALL   _isr_imu_SetVector
                                           ; SOURCE LINE # 77
000A 7F05              MOV     R7,#05H
000C 120000      R     LCALL   _isr_imu_SetPriority
                                           ; SOURCE LINE # 80
000F 120000      R     LCALL   isr_imu_Enable
                                           ; SOURCE LINE # 81
0012 22                RET     
             ; FUNCTION isr_imu_Start (END)

             ; FUNCTION _isr_imu_StartEx (BEGIN)
                                           ; SOURCE LINE # 111
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 114
0008 120000      R     LCALL   isr_imu_Disable
                                           ; SOURCE LINE # 117
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _isr_imu_SetVector
                                           ; SOURCE LINE # 120
0016 7F05              MOV     R7,#05H
0018 120000      R     LCALL   _isr_imu_SetPriority
                                           ; SOURCE LINE # 123
001B 120000      R     LCALL   isr_imu_Enable
                                           ; SOURCE LINE # 124
001E 22                RET     
             ; FUNCTION _isr_imu_StartEx (END)

             ; FUNCTION isr_imu_Stop (BEGIN)
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 144
0000 120000      R     LCALL   isr_imu_Disable
                                           ; SOURCE LINE # 145
0003 22                RET     
             ; FUNCTION isr_imu_Stop (END)

             ; FUNCTION isr_imu_Interrupt (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 10  

0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 178
002B 900000      R     MOV     DPTR,#tmp
002E E4                CLR     A
002F F0                MOVX    @DPTR,A
0030 A3                INC     DPTR
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
0032 900000      R     MOV     DPTR,#k_imu
0035 E0                MOVX    A,@DPTR
0036 2400        E     ADD     A,#LOW IMU_connected
0038 F582              MOV     DPL,A
003A E4                CLR     A
003B 3400        E     ADDC    A,#HIGH IMU_connected
003D F583              MOV     DPH,A
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 7E00              MOV     R6,#00H
0043 120000      E     LCALL   _ChipSelector
                                           ; SOURCE LINE # 182
0046 900000      R     MOV     DPTR,#k_imu
0049 E0                MOVX    A,@DPTR
004A 2400        E     ADD     A,#LOW IMU_connected
004C F582              MOV     DPL,A
004E E4                CLR     A
004F 3400        E     ADDC    A,#HIGH IMU_connected
0051 F583              MOV     DPH,A
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 7E00              MOV     R6,#00H
0057 120000      E     LCALL   _ReadIMU
                                           ; SOURCE LINE # 184
005A 900000      R     MOV     DPTR,#k_imu
005D E0                MOVX    A,@DPTR
005E FD                MOV     R5,A
005F 2400        E     ADD     A,#LOW IMU_connected
0061 F582              MOV     DPL,A
0063 E4                CLR     A
0064 3400        E     ADDC    A,#HIGH IMU_connected
0066 F583              MOV     DPH,A
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A 75F006            MOV     B,#06H
006D A4                MUL     AB
006E 2400        E     ADD     A,#LOW Accel
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 11  

0070 F582              MOV     DPL,A
0072 E4                CLR     A
0073 3400        E     ADDC    A,#HIGH Accel
0075 F583              MOV     DPH,A
0077 E0                MOVX    A,@DPTR
0078 FB                MOV     R3,A
0079 900000      R     MOV     DPTR,#tmp
007C E4                CLR     A
007D F0                MOVX    @DPTR,A
007E A3                INC     DPTR
007F EB                MOV     A,R3
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
0081 EF                MOV     A,R7
0082 75F006            MOV     B,#06H
0085 A4                MUL     AB
0086 2400        E     ADD     A,#LOW Accel+01H
0088 F582              MOV     DPL,A
008A E4                CLR     A
008B 3400        E     ADDC    A,#HIGH Accel+01H
008D F583              MOV     DPH,A
008F E0                MOVX    A,@DPTR
0090 FB                MOV     R3,A
0091 900000      R     MOV     DPTR,#tmp+01H
0094 E0                MOVX    A,@DPTR
0095 FE                MOV     R6,A
0096 EB                MOV     A,R3
0097 FF                MOV     R7,A
0098 75F015            MOV     B,#015H
009B ED                MOV     A,R5
009C A4                MUL     AB
009D 2400        R     ADD     A,#LOW g_imuTMP+01H
009F F582              MOV     DPL,A
00A1 E5F0              MOV     A,B
00A3 3400        R     ADDC    A,#HIGH g_imuTMP+01H
00A5 F583              MOV     DPH,A
00A7 EE                MOV     A,R6
00A8 F0                MOVX    @DPTR,A
00A9 A3                INC     DPTR
00AA EF                MOV     A,R7
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
00AC 900000      R     MOV     DPTR,#k_imu
00AF E0                MOVX    A,@DPTR
00B0 FD                MOV     R5,A
00B1 2400        E     ADD     A,#LOW IMU_connected
00B3 F582              MOV     DPL,A
00B5 E4                CLR     A
00B6 3400        E     ADDC    A,#HIGH IMU_connected
00B8 F583              MOV     DPH,A
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC 75F006            MOV     B,#06H
00BF A4                MUL     AB
00C0 2400        E     ADD     A,#LOW Accel+02H
00C2 F582              MOV     DPL,A
00C4 E4                CLR     A
00C5 3400        E     ADDC    A,#HIGH Accel+02H
00C7 F583              MOV     DPH,A
00C9 E0                MOVX    A,@DPTR
00CA FB                MOV     R3,A
00CB 900000      R     MOV     DPTR,#tmp
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 12  

00CE E4                CLR     A
00CF F0                MOVX    @DPTR,A
00D0 A3                INC     DPTR
00D1 EB                MOV     A,R3
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
00D3 EF                MOV     A,R7
00D4 75F006            MOV     B,#06H
00D7 A4                MUL     AB
00D8 2400        E     ADD     A,#LOW Accel+03H
00DA F582              MOV     DPL,A
00DC E4                CLR     A
00DD 3400        E     ADDC    A,#HIGH Accel+03H
00DF F583              MOV     DPH,A
00E1 E0                MOVX    A,@DPTR
00E2 FB                MOV     R3,A
00E3 900000      R     MOV     DPTR,#tmp+01H
00E6 E0                MOVX    A,@DPTR
00E7 FE                MOV     R6,A
00E8 EB                MOV     A,R3
00E9 FF                MOV     R7,A
00EA 75F015            MOV     B,#015H
00ED ED                MOV     A,R5
00EE A4                MUL     AB
00EF 2400        R     ADD     A,#LOW g_imuTMP+03H
00F1 F582              MOV     DPL,A
00F3 E5F0              MOV     A,B
00F5 3400        R     ADDC    A,#HIGH g_imuTMP+03H
00F7 F583              MOV     DPH,A
00F9 EE                MOV     A,R6
00FA F0                MOVX    @DPTR,A
00FB A3                INC     DPTR
00FC EF                MOV     A,R7
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
00FE 900000      R     MOV     DPTR,#k_imu
0101 E0                MOVX    A,@DPTR
0102 FD                MOV     R5,A
0103 2400        E     ADD     A,#LOW IMU_connected
0105 F582              MOV     DPL,A
0107 E4                CLR     A
0108 3400        E     ADDC    A,#HIGH IMU_connected
010A F583              MOV     DPH,A
010C E0                MOVX    A,@DPTR
010D FF                MOV     R7,A
010E 75F006            MOV     B,#06H
0111 A4                MUL     AB
0112 2400        E     ADD     A,#LOW Accel+04H
0114 F582              MOV     DPL,A
0116 E4                CLR     A
0117 3400        E     ADDC    A,#HIGH Accel+04H
0119 F583              MOV     DPH,A
011B E0                MOVX    A,@DPTR
011C FB                MOV     R3,A
011D 900000      R     MOV     DPTR,#tmp
0120 E4                CLR     A
0121 F0                MOVX    @DPTR,A
0122 A3                INC     DPTR
0123 EB                MOV     A,R3
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
0125 EF                MOV     A,R7
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 13  

0126 75F006            MOV     B,#06H
0129 A4                MUL     AB
012A 2400        E     ADD     A,#LOW Accel+05H
012C F582              MOV     DPL,A
012E E4                CLR     A
012F 3400        E     ADDC    A,#HIGH Accel+05H
0131 F583              MOV     DPH,A
0133 E0                MOVX    A,@DPTR
0134 FB                MOV     R3,A
0135 900000      R     MOV     DPTR,#tmp+01H
0138 E0                MOVX    A,@DPTR
0139 FE                MOV     R6,A
013A EB                MOV     A,R3
013B FF                MOV     R7,A
013C 75F015            MOV     B,#015H
013F ED                MOV     A,R5
0140 A4                MUL     AB
0141 2400        R     ADD     A,#LOW g_imuTMP+05H
0143 F582              MOV     DPL,A
0145 E5F0              MOV     A,B
0147 3400        R     ADDC    A,#HIGH g_imuTMP+05H
0149 F583              MOV     DPH,A
014B EE                MOV     A,R6
014C F0                MOVX    @DPTR,A
014D A3                INC     DPTR
014E EF                MOV     A,R7
014F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0150 900000      R     MOV     DPTR,#k_imu
0153 E0                MOVX    A,@DPTR
0154 FD                MOV     R5,A
0155 2400        E     ADD     A,#LOW IMU_connected
0157 F582              MOV     DPL,A
0159 E4                CLR     A
015A 3400        E     ADDC    A,#HIGH IMU_connected
015C F583              MOV     DPH,A
015E E0                MOVX    A,@DPTR
015F FF                MOV     R7,A
0160 75F006            MOV     B,#06H
0163 A4                MUL     AB
0164 2400        E     ADD     A,#LOW Gyro
0166 F582              MOV     DPL,A
0168 E4                CLR     A
0169 3400        E     ADDC    A,#HIGH Gyro
016B F583              MOV     DPH,A
016D E0                MOVX    A,@DPTR
016E FB                MOV     R3,A
016F 900000      R     MOV     DPTR,#tmp
0172 E4                CLR     A
0173 F0                MOVX    @DPTR,A
0174 A3                INC     DPTR
0175 EB                MOV     A,R3
0176 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
0177 EF                MOV     A,R7
0178 75F006            MOV     B,#06H
017B A4                MUL     AB
017C 2400        E     ADD     A,#LOW Gyro+01H
017E F582              MOV     DPL,A
0180 E4                CLR     A
0181 3400        E     ADDC    A,#HIGH Gyro+01H
0183 F583              MOV     DPH,A
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 14  

0185 E0                MOVX    A,@DPTR
0186 FB                MOV     R3,A
0187 900000      R     MOV     DPTR,#tmp+01H
018A E0                MOVX    A,@DPTR
018B FE                MOV     R6,A
018C EB                MOV     A,R3
018D FF                MOV     R7,A
018E 75F015            MOV     B,#015H
0191 ED                MOV     A,R5
0192 A4                MUL     AB
0193 2400        R     ADD     A,#LOW g_imuTMP+07H
0195 F582              MOV     DPL,A
0197 E5F0              MOV     A,B
0199 3400        R     ADDC    A,#HIGH g_imuTMP+07H
019B F583              MOV     DPH,A
019D EE                MOV     A,R6
019E F0                MOVX    @DPTR,A
019F A3                INC     DPTR
01A0 EF                MOV     A,R7
01A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
01A2 900000      R     MOV     DPTR,#k_imu
01A5 E0                MOVX    A,@DPTR
01A6 FD                MOV     R5,A
01A7 2400        E     ADD     A,#LOW IMU_connected
01A9 F582              MOV     DPL,A
01AB E4                CLR     A
01AC 3400        E     ADDC    A,#HIGH IMU_connected
01AE F583              MOV     DPH,A
01B0 E0                MOVX    A,@DPTR
01B1 FF                MOV     R7,A
01B2 75F006            MOV     B,#06H
01B5 A4                MUL     AB
01B6 2400        E     ADD     A,#LOW Gyro+02H
01B8 F582              MOV     DPL,A
01BA E4                CLR     A
01BB 3400        E     ADDC    A,#HIGH Gyro+02H
01BD F583              MOV     DPH,A
01BF E0                MOVX    A,@DPTR
01C0 FB                MOV     R3,A
01C1 900000      R     MOV     DPTR,#tmp
01C4 E4                CLR     A
01C5 F0                MOVX    @DPTR,A
01C6 A3                INC     DPTR
01C7 EB                MOV     A,R3
01C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
01C9 EF                MOV     A,R7
01CA 75F006            MOV     B,#06H
01CD A4                MUL     AB
01CE 2400        E     ADD     A,#LOW Gyro+03H
01D0 F582              MOV     DPL,A
01D2 E4                CLR     A
01D3 3400        E     ADDC    A,#HIGH Gyro+03H
01D5 F583              MOV     DPH,A
01D7 E0                MOVX    A,@DPTR
01D8 FB                MOV     R3,A
01D9 900000      R     MOV     DPTR,#tmp+01H
01DC E0                MOVX    A,@DPTR
01DD FE                MOV     R6,A
01DE EB                MOV     A,R3
01DF FF                MOV     R7,A
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 15  

01E0 75F015            MOV     B,#015H
01E3 ED                MOV     A,R5
01E4 A4                MUL     AB
01E5 2400        R     ADD     A,#LOW g_imuTMP+09H
01E7 F582              MOV     DPL,A
01E9 E5F0              MOV     A,B
01EB 3400        R     ADDC    A,#HIGH g_imuTMP+09H
01ED F583              MOV     DPH,A
01EF EE                MOV     A,R6
01F0 F0                MOVX    @DPTR,A
01F1 A3                INC     DPTR
01F2 EF                MOV     A,R7
01F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
01F4 900000      R     MOV     DPTR,#k_imu
01F7 E0                MOVX    A,@DPTR
01F8 FD                MOV     R5,A
01F9 2400        E     ADD     A,#LOW IMU_connected
01FB F582              MOV     DPL,A
01FD E4                CLR     A
01FE 3400        E     ADDC    A,#HIGH IMU_connected
0200 F583              MOV     DPH,A
0202 E0                MOVX    A,@DPTR
0203 FF                MOV     R7,A
0204 75F006            MOV     B,#06H
0207 A4                MUL     AB
0208 2400        E     ADD     A,#LOW Gyro+04H
020A F582              MOV     DPL,A
020C E4                CLR     A
020D 3400        E     ADDC    A,#HIGH Gyro+04H
020F F583              MOV     DPH,A
0211 E0                MOVX    A,@DPTR
0212 FB                MOV     R3,A
0213 900000      R     MOV     DPTR,#tmp
0216 E4                CLR     A
0217 F0                MOVX    @DPTR,A
0218 A3                INC     DPTR
0219 EB                MOV     A,R3
021A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
021B EF                MOV     A,R7
021C 75F006            MOV     B,#06H
021F A4                MUL     AB
0220 2400        E     ADD     A,#LOW Gyro+05H
0222 F582              MOV     DPL,A
0224 E4                CLR     A
0225 3400        E     ADDC    A,#HIGH Gyro+05H
0227 F583              MOV     DPH,A
0229 E0                MOVX    A,@DPTR
022A FB                MOV     R3,A
022B 900000      R     MOV     DPTR,#tmp+01H
022E E0                MOVX    A,@DPTR
022F FE                MOV     R6,A
0230 EB                MOV     A,R3
0231 FF                MOV     R7,A
0232 75F015            MOV     B,#015H
0235 ED                MOV     A,R5
0236 A4                MUL     AB
0237 2400        R     ADD     A,#LOW g_imuTMP+0BH
0239 F582              MOV     DPL,A
023B E5F0              MOV     A,B
023D 3400        R     ADDC    A,#HIGH g_imuTMP+0BH
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 16  

023F F583              MOV     DPH,A
0241 EE                MOV     A,R6
0242 F0                MOVX    @DPTR,A
0243 A3                INC     DPTR
0244 EF                MOV     A,R7
0245 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
0246 900000      R     MOV     DPTR,#k_imu
0249 E0                MOVX    A,@DPTR
024A FD                MOV     R5,A
024B 2400        E     ADD     A,#LOW IMU_connected
024D F582              MOV     DPL,A
024F E4                CLR     A
0250 3400        E     ADDC    A,#HIGH IMU_connected
0252 F583              MOV     DPH,A
0254 E0                MOVX    A,@DPTR
0255 FF                MOV     R7,A
0256 75F006            MOV     B,#06H
0259 A4                MUL     AB
025A 2400        E     ADD     A,#LOW Mag
025C F582              MOV     DPL,A
025E E4                CLR     A
025F 3400        E     ADDC    A,#HIGH Mag
0261 F583              MOV     DPH,A
0263 E0                MOVX    A,@DPTR
0264 FB                MOV     R3,A
0265 900000      R     MOV     DPTR,#tmp
0268 E4                CLR     A
0269 F0                MOVX    @DPTR,A
026A A3                INC     DPTR
026B EB                MOV     A,R3
026C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
026D EF                MOV     A,R7
026E 75F006            MOV     B,#06H
0271 A4                MUL     AB
0272 2400        E     ADD     A,#LOW Mag+01H
0274 F582              MOV     DPL,A
0276 E4                CLR     A
0277 3400        E     ADDC    A,#HIGH Mag+01H
0279 F583              MOV     DPH,A
027B E0                MOVX    A,@DPTR
027C FB                MOV     R3,A
027D 900000      R     MOV     DPTR,#tmp+01H
0280 E0                MOVX    A,@DPTR
0281 FE                MOV     R6,A
0282 EB                MOV     A,R3
0283 FF                MOV     R7,A
0284 75F015            MOV     B,#015H
0287 ED                MOV     A,R5
0288 A4                MUL     AB
0289 2400        R     ADD     A,#LOW g_imuTMP+0DH
028B F582              MOV     DPL,A
028D E5F0              MOV     A,B
028F 3400        R     ADDC    A,#HIGH g_imuTMP+0DH
0291 F583              MOV     DPH,A
0293 EE                MOV     A,R6
0294 F0                MOVX    @DPTR,A
0295 A3                INC     DPTR
0296 EF                MOV     A,R7
0297 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 17  

0298 900000      R     MOV     DPTR,#k_imu
029B E0                MOVX    A,@DPTR
029C FD                MOV     R5,A
029D 2400        E     ADD     A,#LOW IMU_connected
029F F582              MOV     DPL,A
02A1 E4                CLR     A
02A2 3400        E     ADDC    A,#HIGH IMU_connected
02A4 F583              MOV     DPH,A
02A6 E0                MOVX    A,@DPTR
02A7 FF                MOV     R7,A
02A8 75F006            MOV     B,#06H
02AB A4                MUL     AB
02AC 2400        E     ADD     A,#LOW Mag+02H
02AE F582              MOV     DPL,A
02B0 E4                CLR     A
02B1 3400        E     ADDC    A,#HIGH Mag+02H
02B3 F583              MOV     DPH,A
02B5 E0                MOVX    A,@DPTR
02B6 FB                MOV     R3,A
02B7 900000      R     MOV     DPTR,#tmp
02BA E4                CLR     A
02BB F0                MOVX    @DPTR,A
02BC A3                INC     DPTR
02BD EB                MOV     A,R3
02BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
02BF EF                MOV     A,R7
02C0 75F006            MOV     B,#06H
02C3 A4                MUL     AB
02C4 2400        E     ADD     A,#LOW Mag+03H
02C6 F582              MOV     DPL,A
02C8 E4                CLR     A
02C9 3400        E     ADDC    A,#HIGH Mag+03H
02CB F583              MOV     DPH,A
02CD E0                MOVX    A,@DPTR
02CE FB                MOV     R3,A
02CF 900000      R     MOV     DPTR,#tmp+01H
02D2 E0                MOVX    A,@DPTR
02D3 FE                MOV     R6,A
02D4 EB                MOV     A,R3
02D5 FF                MOV     R7,A
02D6 75F015            MOV     B,#015H
02D9 ED                MOV     A,R5
02DA A4                MUL     AB
02DB 2400        R     ADD     A,#LOW g_imuTMP+0FH
02DD F582              MOV     DPL,A
02DF E5F0              MOV     A,B
02E1 3400        R     ADDC    A,#HIGH g_imuTMP+0FH
02E3 F583              MOV     DPH,A
02E5 EE                MOV     A,R6
02E6 F0                MOVX    @DPTR,A
02E7 A3                INC     DPTR
02E8 EF                MOV     A,R7
02E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
02EA 900000      R     MOV     DPTR,#k_imu
02ED E0                MOVX    A,@DPTR
02EE FD                MOV     R5,A
02EF 2400        E     ADD     A,#LOW IMU_connected
02F1 F582              MOV     DPL,A
02F3 E4                CLR     A
02F4 3400        E     ADDC    A,#HIGH IMU_connected
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 18  

02F6 F583              MOV     DPH,A
02F8 E0                MOVX    A,@DPTR
02F9 FF                MOV     R7,A
02FA 75F006            MOV     B,#06H
02FD A4                MUL     AB
02FE 2400        E     ADD     A,#LOW Mag+04H
0300 F582              MOV     DPL,A
0302 E4                CLR     A
0303 3400        E     ADDC    A,#HIGH Mag+04H
0305 F583              MOV     DPH,A
0307 E0                MOVX    A,@DPTR
0308 FB                MOV     R3,A
0309 900000      R     MOV     DPTR,#tmp
030C E4                CLR     A
030D F0                MOVX    @DPTR,A
030E A3                INC     DPTR
030F EB                MOV     A,R3
0310 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
0311 EF                MOV     A,R7
0312 75F006            MOV     B,#06H
0315 A4                MUL     AB
0316 2400        E     ADD     A,#LOW Mag+05H
0318 F582              MOV     DPL,A
031A E4                CLR     A
031B 3400        E     ADDC    A,#HIGH Mag+05H
031D F583              MOV     DPH,A
031F E0                MOVX    A,@DPTR
0320 FB                MOV     R3,A
0321 900000      R     MOV     DPTR,#tmp+01H
0324 E0                MOVX    A,@DPTR
0325 FE                MOV     R6,A
0326 EB                MOV     A,R3
0327 FF                MOV     R7,A
0328 75F015            MOV     B,#015H
032B ED                MOV     A,R5
032C A4                MUL     AB
032D 2400        R     ADD     A,#LOW g_imuTMP+011H
032F F582              MOV     DPL,A
0331 E5F0              MOV     A,B
0333 3400        R     ADDC    A,#HIGH g_imuTMP+011H
0335 F583              MOV     DPH,A
0337 EE                MOV     A,R6
0338 F0                MOVX    @DPTR,A
0339 A3                INC     DPTR
033A EF                MOV     A,R7
033B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
033C 900000      R     MOV     DPTR,#k_imu
033F E0                MOVX    A,@DPTR
0340 04                INC     A
0341 FF                MOV     R7,A
0342 900000      E     MOV     DPTR,#N_IMU_Connected
0345 E0                MOVX    A,@DPTR
0346 FE                MOV     R6,A
0347 EF                MOV     A,R7
0348 8EF0              MOV     B,R6
034A 84                DIV     AB
034B AFF0              MOV     R7,B
034D 900000      R     MOV     DPTR,#k_imu
0350 EF                MOV     A,R7
0351 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 19  

                                           ; SOURCE LINE # 208
0352 7013              JNZ     ?C0005
                                           ; SOURCE LINE # 209
0354 7800        E     MOV     R0,#LOW g_imuNew
0356 7C00        E     MOV     R4,#HIGH g_imuNew
0358 7D01              MOV     R5,#01H
035A 7B01              MOV     R3,#01H
035C 7A00        R     MOV     R2,#HIGH g_imuTMP
035E 7900        R     MOV     R1,#LOW g_imuTMP
0360 7E01              MOV     R6,#01H
0362 7F65              MOV     R7,#065H
0364 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 220
0367         ?C0005:
0367 D007              POP     AR7
0369 D006              POP     AR6
036B D005              POP     AR5
036D D004              POP     AR4
036F D003              POP     AR3
0371 D002              POP     AR2
0373 D001              POP     AR1
0375 D000              POP     AR0
0377 D0D0              POP     PSW
0379 D000        E     POP     ?C?XPAGE1SFR
037B D086              POP     DPS
037D D084              POP     DPL1
037F D085              POP     DPH1
0381 D082              POP     DPL
0383 D083              POP     DPH
0385 D0F0              POP     B
0387 D0E0              POP     ACC
0389 32                RETI    
             ; FUNCTION isr_imu_Interrupt (END)

             ; FUNCTION _isr_imu_SetVector (BEGIN)
                                           ; SOURCE LINE # 250
;---- Variable 'address' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7904              MOV     R1,#04H
0006 AD07              MOV     R5,AR7
0008 AC06              MOV     R4,AR6
000A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 253
000D 22                RET     
             ; FUNCTION _isr_imu_SetVector (END)

             ; FUNCTION isr_imu_GetVector (BEGIN)
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7904              MOV     R1,#04H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 273
0009         ?C0007:
0009 22                RET     
             ; FUNCTION isr_imu_GetVector (END)
C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 20  


             ; FUNCTION _isr_imu_SetPriority (BEGIN)
                                           ; SOURCE LINE # 300
;---- Variable 'priority' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
0000 EF                MOV     A,R7
0001 C4                SWAP    A
0002 33                RLC     A
0003 54E0              ANL     A,#0E0H
0005 904482            MOV     DPTR,#04482H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
0009 22                RET     
             ; FUNCTION _isr_imu_SetPriority (END)

             ; FUNCTION isr_imu_GetPriority (BEGIN)
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 327
0000 904482            MOV     DPTR,#04482H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 C4                SWAP    A
0006 13                RRC     A
0007 5407              ANL     A,#07H
0009 FF                MOV     R7,A
;---- Variable 'priority' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
000A         ?C0009:
000A 22                RET     
             ; FUNCTION isr_imu_GetPriority (END)

             ; FUNCTION isr_imu_Enable (BEGIN)
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 352
0000 9044C0            MOV     DPTR,#044C0H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
0006 22                RET     
             ; FUNCTION isr_imu_Enable (END)

             ; FUNCTION isr_imu_GetState (BEGIN)
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 373
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 30E204            JNB     ACC.2,?C0011
0007 7F01              MOV     R7,#01H
0009 8002              SJMP    ?C0012
000B         ?C0011:
000B 7F00              MOV     R7,#00H
000D         ?C0012:
                                           ; SOURCE LINE # 374
000D         ?C0013:
000D 22                RET     
             ; FUNCTION isr_imu_GetState (END)

C51 COMPILER V9.51   ISR_IMU                                                               11/16/2017 15:16:21 PAGE 21  

             ; FUNCTION isr_imu_Disable (BEGIN)
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 394
0000 9044C8            MOV     DPTR,#044C8H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
0006 22                RET     
             ; FUNCTION isr_imu_Disable (END)

             ; FUNCTION isr_imu_SetPending (BEGIN)
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 420
0000 9044D0            MOV     DPTR,#044D0H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 421
0006 22                RET     
             ; FUNCTION isr_imu_SetPending (END)

             ; FUNCTION isr_imu_ClearPending (BEGIN)
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
0000 9044D8            MOV     DPTR,#044D8H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
0006 22                RET     
             ; FUNCTION isr_imu_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1047    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    358       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
